generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model student {
  student_uid      String                   @id @db.VarChar(10)
  english_name     String                   @db.VarChar(64)
  acad_year        String                   @db.VarChar(4)
  course_year      Int                      @db.TinyInt
  curriculum       String                   @db.VarChar(30)
  placement_status student_placement_status @default(NA)
  modified_by      String                   @db.VarChar(8)
  last_modified    DateTime                 @updatedAt
  user_account     user_account             @relation(fields: [account_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "student_ibfk_1")
  account_id       Int                      @unique
  placement        placement[]

  @@index([account_id], map: "account_id")
}

model user_account {
  account_id  Int         @id @default(autoincrement())
  student_uid String?     @unique @db.VarChar(10)
  username    String      @unique @db.VarChar(8)
  password    String      @db.VarChar(20)
  student     student?
  faq         faq[]
  placement   placement[]
  remarks     remarks[]

}

model placement {
  placement_id         Int                     @id @unique(map: "placement_id") @default(autoincrement())
  username             String                  @unique @db.VarChar(8)
  student_uid          String                  @db.VarChar(10)
  placement_year       String                  @db.VarChar(4)
  appointment_letter   String?                 @db.Text
  feedback_form        String?                 @db.Text
  feedback_comment     String?                 @db.VarChar(200)
  company_name         String?                 @db.VarChar(100)
  job_title            String?                 @db.VarChar(40)
  job_nature           String?                 @db.Text
  employment_duration  String?                 @db.VarChar(60)
  start_date           DateTime?               @db.Date
  end_date             DateTime?               @db.Date
  working_location     String?                 @db.VarChar(60)
  salary               String?                 @db.VarChar(11)
  payment_type         placement_payment_type?
  supervisor_name      String?                 @db.VarChar(60)
  supervisor_telephone String?                 @db.VarChar(20)
  supervisor_email     String?                 @db.VarChar(60)
  modified_by          String                  @db.VarChar(8)
  last_modified        DateTime                @updatedAt
  created_by           String                  @db.VarChar(10)
  creation_time        DateTime                @db.DateTime(0)
  consent_form         String?                 @db.Text
  student              student                 @relation(fields: [student_uid], references: [student_uid], onDelete: NoAction, onUpdate: NoAction, map: "placement_ibfk_1")
  user_account         user_account            @relation(fields: [username], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "placement_ibfk_2")
  remarks              remarks[]

  @@index([student_uid], map: "student_uid")
  @@index([username], map: "username")
}

model faq {
  faq_id        Int          @id @default(autoincrement())
  account_id    Int
  questions     String?      @db.Text
  answers       String?      @db.Text
  last_modified DateTime     @updatedAt
  cat           String?      @db.VarChar(20)
  user_account  user_account @relation(fields: [account_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "faq_ibfk_1")

  @@index([account_id], map: "account_id")
}

model remarks {
  remarks_id   Int          @id @default(autoincrement())
  account_id   Int
  placement_id Int
  remark       String?      @db.Text
  sent_on      DateTime     @db.DateTime(0)
  sent_to      String       @db.VarChar(10)
  user_account user_account @relation(fields: [account_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "remarks_ibfk_1")
  placement    placement    @relation(fields: [placement_id], references: [placement_id], onDelete: NoAction, onUpdate: NoAction, map: "remarks_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([placement_id], map: "placement_id")
}

enum student_placement_status {
  NA
  Waiting
  Incomplete
  Approved
}

enum placement_payment_type {
  paid
  unpaid
  honorarium
}
