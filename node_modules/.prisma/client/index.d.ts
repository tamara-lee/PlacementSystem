
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model student
 * 
 */
export type student = {
  student_uid: string
  english_name: string
  acad_year: string
  course_year: number
  curriculum: string
  placement_status: student_placement_status
  modified_by: string
  last_modified: Date
}

/**
 * Model user_account
 * 
 */
export type user_account = {
  account_id: number
  student_uid: string | null
  username: string
  password: string
}

/**
 * Model placement
 * 
 */
export type placement = {
  placement_id: number
  username: string
  student_uid: string
  placement_year: string
  appointment_letter: string | null
  feedback_form: string | null
  feedback_comment: string | null
  company_name: string | null
  job_title: string | null
  job_nature: string | null
  employment_duration: string | null
  start_date: Date | null
  end_date: Date | null
  working_location: string | null
  salary: Prisma.Decimal | null
  payment_type: placement_payment_type | null
  supervisor_name: string | null
  supervisor_telephone: string | null
  supervisor_email: string | null
  modified_by: string
  last_modified: Date
  created_by: string
  creation_time: Date
  consent_form: string | null
}

/**
 * Model faq
 * 
 */
export type faq = {
  faq_id: number
  account_id: number
  questions: string | null
  answers: string | null
  last_modified: Date
  cat: string | null
}

/**
 * Model remarks
 * 
 */
export type remarks = {
  remarks_id: number
  account_id: number
  placement_id: number
  remark: string | null
  answers: string | null
  cat: string | null
  sent_on: Date
  sent_to: string
}

/**
 * Model test_acad_year
 * 
 */
export type test_acad_year = {
  acad_test_id: number
  acad_test_year: number | null
}

/**
 * Model test_placement_year
 * 
 */
export type test_placement_year = {
  placement_test_id: number
  placement_test_year: number | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const student_placement_status: {
  NA: 'NA',
  Waiting: 'Waiting',
  Incomplete: 'Incomplete',
  Approved: 'Approved'
};

export type student_placement_status = (typeof student_placement_status)[keyof typeof student_placement_status]


export const placement_payment_type: {
  paid: 'paid',
  unpaid: 'unpaid',
  honorarium: 'honorarium'
};

export type placement_payment_type = (typeof placement_payment_type)[keyof typeof placement_payment_type]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.student.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.student`: Exposes CRUD operations for the **student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.studentDelegate<GlobalReject>;

  /**
   * `prisma.user_account`: Exposes CRUD operations for the **user_account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_accounts
    * const user_accounts = await prisma.user_account.findMany()
    * ```
    */
  get user_account(): Prisma.user_accountDelegate<GlobalReject>;

  /**
   * `prisma.placement`: Exposes CRUD operations for the **placement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Placements
    * const placements = await prisma.placement.findMany()
    * ```
    */
  get placement(): Prisma.placementDelegate<GlobalReject>;

  /**
   * `prisma.faq`: Exposes CRUD operations for the **faq** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faqs
    * const faqs = await prisma.faq.findMany()
    * ```
    */
  get faq(): Prisma.faqDelegate<GlobalReject>;

  /**
   * `prisma.remarks`: Exposes CRUD operations for the **remarks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Remarks
    * const remarks = await prisma.remarks.findMany()
    * ```
    */
  get remarks(): Prisma.remarksDelegate<GlobalReject>;

  /**
   * `prisma.test_acad_year`: Exposes CRUD operations for the **test_acad_year** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Test_acad_years
    * const test_acad_years = await prisma.test_acad_year.findMany()
    * ```
    */
  get test_acad_year(): Prisma.test_acad_yearDelegate<GlobalReject>;

  /**
   * `prisma.test_placement_year`: Exposes CRUD operations for the **test_placement_year** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Test_placement_years
    * const test_placement_years = await prisma.test_placement_year.findMany()
    * ```
    */
  get test_placement_year(): Prisma.test_placement_yearDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    student: 'student',
    user_account: 'user_account',
    placement: 'placement',
    faq: 'faq',
    remarks: 'remarks',
    test_acad_year: 'test_acad_year',
    test_placement_year: 'test_placement_year'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */


  export type StudentCountOutputType = {
    placement: number
    user_account: number
  }

  export type StudentCountOutputTypeSelect = {
    placement?: boolean
    user_account?: boolean
  }

  export type StudentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StudentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StudentCountOutputType
    : S extends undefined
    ? never
    : S extends StudentCountOutputTypeArgs
    ?'include' extends U
    ? StudentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StudentCountOutputType ? StudentCountOutputType[P] : never
  } 
    : StudentCountOutputType
  : StudentCountOutputType




  // Custom InputTypes

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     * 
    **/
    select?: StudentCountOutputTypeSelect | null
  }



  /**
   * Count Type User_accountCountOutputType
   */


  export type User_accountCountOutputType = {
    faq: number
    placement: number
    remarks: number
  }

  export type User_accountCountOutputTypeSelect = {
    faq?: boolean
    placement?: boolean
    remarks?: boolean
  }

  export type User_accountCountOutputTypeGetPayload<
    S extends boolean | null | undefined | User_accountCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? User_accountCountOutputType
    : S extends undefined
    ? never
    : S extends User_accountCountOutputTypeArgs
    ?'include' extends U
    ? User_accountCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User_accountCountOutputType ? User_accountCountOutputType[P] : never
  } 
    : User_accountCountOutputType
  : User_accountCountOutputType




  // Custom InputTypes

  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the User_accountCountOutputType
     * 
    **/
    select?: User_accountCountOutputTypeSelect | null
  }



  /**
   * Count Type PlacementCountOutputType
   */


  export type PlacementCountOutputType = {
    remarks: number
  }

  export type PlacementCountOutputTypeSelect = {
    remarks?: boolean
  }

  export type PlacementCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PlacementCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PlacementCountOutputType
    : S extends undefined
    ? never
    : S extends PlacementCountOutputTypeArgs
    ?'include' extends U
    ? PlacementCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PlacementCountOutputType ? PlacementCountOutputType[P] : never
  } 
    : PlacementCountOutputType
  : PlacementCountOutputType




  // Custom InputTypes

  /**
   * PlacementCountOutputType without action
   */
  export type PlacementCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PlacementCountOutputType
     * 
    **/
    select?: PlacementCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model student
   */


  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    course_year: number | null
  }

  export type StudentSumAggregateOutputType = {
    course_year: number | null
  }

  export type StudentMinAggregateOutputType = {
    student_uid: string | null
    english_name: string | null
    acad_year: string | null
    course_year: number | null
    curriculum: string | null
    placement_status: student_placement_status | null
    modified_by: string | null
    last_modified: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    student_uid: string | null
    english_name: string | null
    acad_year: string | null
    course_year: number | null
    curriculum: string | null
    placement_status: student_placement_status | null
    modified_by: string | null
    last_modified: Date | null
  }

  export type StudentCountAggregateOutputType = {
    student_uid: number
    english_name: number
    acad_year: number
    course_year: number
    curriculum: number
    placement_status: number
    modified_by: number
    last_modified: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    course_year?: true
  }

  export type StudentSumAggregateInputType = {
    course_year?: true
  }

  export type StudentMinAggregateInputType = {
    student_uid?: true
    english_name?: true
    acad_year?: true
    course_year?: true
    curriculum?: true
    placement_status?: true
    modified_by?: true
    last_modified?: true
  }

  export type StudentMaxAggregateInputType = {
    student_uid?: true
    english_name?: true
    acad_year?: true
    course_year?: true
    curriculum?: true
    placement_status?: true
    modified_by?: true
    last_modified?: true
  }

  export type StudentCountAggregateInputType = {
    student_uid?: true
    english_name?: true
    acad_year?: true
    course_year?: true
    curriculum?: true
    placement_status?: true
    modified_by?: true
    last_modified?: true
    _all?: true
  }

  export type StudentAggregateArgs = {
    /**
     * Filter which student to aggregate.
     * 
    **/
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs = {
    where?: studentWhereInput
    orderBy?: Enumerable<studentOrderByWithAggregationInput>
    by: Array<StudentScalarFieldEnum>
    having?: studentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }


  export type StudentGroupByOutputType = {
    student_uid: string
    english_name: string
    acad_year: string
    course_year: number
    curriculum: string
    placement_status: student_placement_status
    modified_by: string
    last_modified: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type studentSelect = {
    student_uid?: boolean
    english_name?: boolean
    acad_year?: boolean
    course_year?: boolean
    curriculum?: boolean
    placement_status?: boolean
    modified_by?: boolean
    last_modified?: boolean
    placement?: boolean | placementFindManyArgs
    user_account?: boolean | user_accountFindManyArgs
    _count?: boolean | StudentCountOutputTypeArgs
  }

  export type studentInclude = {
    placement?: boolean | placementFindManyArgs
    user_account?: boolean | user_accountFindManyArgs
    _count?: boolean | StudentCountOutputTypeArgs
  }

  export type studentGetPayload<
    S extends boolean | null | undefined | studentArgs,
    U = keyof S
      > = S extends true
        ? student
    : S extends undefined
    ? never
    : S extends studentArgs | studentFindManyArgs
    ?'include' extends U
    ? student  & {
    [P in TrueKeys<S['include']>]:
        P extends 'placement' ? Array < placementGetPayload<S['include'][P]>>  :
        P extends 'user_account' ? Array < user_accountGetPayload<S['include'][P]>>  :
        P extends '_count' ? StudentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'placement' ? Array < placementGetPayload<S['select'][P]>>  :
        P extends 'user_account' ? Array < user_accountGetPayload<S['select'][P]>>  :
        P extends '_count' ? StudentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof student ? student[P] : never
  } 
    : student
  : student


  type studentCountArgs = Merge<
    Omit<studentFindManyArgs, 'select' | 'include'> & {
      select?: StudentCountAggregateInputType | true
    }
  >

  export interface studentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Student that matches the filter.
     * @param {studentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends studentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, studentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'student'> extends True ? CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>> : CheckSelect<T, Prisma__studentClient<student | null >, Prisma__studentClient<studentGetPayload<T> | null >>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends studentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, studentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'student'> extends True ? CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>> : CheckSelect<T, Prisma__studentClient<student | null >, Prisma__studentClient<studentGetPayload<T> | null >>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `student_uid`
     * const studentWithStudent_uidOnly = await prisma.student.findMany({ select: { student_uid: true } })
     * 
    **/
    findMany<T extends studentFindManyArgs>(
      args?: SelectSubset<T, studentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<student>>, PrismaPromise<Array<studentGetPayload<T>>>>

    /**
     * Create a Student.
     * @param {studentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends studentCreateArgs>(
      args: SelectSubset<T, studentCreateArgs>
    ): CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>>

    /**
     * Create many Students.
     *     @param {studentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends studentCreateManyArgs>(
      args?: SelectSubset<T, studentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {studentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends studentDeleteArgs>(
      args: SelectSubset<T, studentDeleteArgs>
    ): CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>>

    /**
     * Update one Student.
     * @param {studentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends studentUpdateArgs>(
      args: SelectSubset<T, studentUpdateArgs>
    ): CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>>

    /**
     * Delete zero or more Students.
     * @param {studentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends studentDeleteManyArgs>(
      args?: SelectSubset<T, studentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends studentUpdateManyArgs>(
      args: SelectSubset<T, studentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {studentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends studentUpsertArgs>(
      args: SelectSubset<T, studentUpsertArgs>
    ): CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends studentCountArgs>(
      args?: Subset<T, studentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__studentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    placement<T extends placementFindManyArgs = {}>(args?: Subset<T, placementFindManyArgs>): CheckSelect<T, PrismaPromise<Array<placement>>, PrismaPromise<Array<placementGetPayload<T>>>>;

    user_account<T extends user_accountFindManyArgs = {}>(args?: Subset<T, user_accountFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_account>>, PrismaPromise<Array<user_accountGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * student findUnique
   */
  export type studentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * Throw an Error if a student can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which student to fetch.
     * 
    **/
    where: studentWhereUniqueInput
  }


  /**
   * student findFirst
   */
  export type studentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * Throw an Error if a student can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which student to fetch.
     * 
    **/
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     * 
    **/
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     * 
    **/
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * student findMany
   */
  export type studentFindManyArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * Filter, which students to fetch.
     * 
    **/
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing students.
     * 
    **/
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * student create
   */
  export type studentCreateArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * The data needed to create a student.
     * 
    **/
    data: XOR<studentCreateInput, studentUncheckedCreateInput>
  }


  /**
   * student createMany
   */
  export type studentCreateManyArgs = {
    /**
     * The data used to create many students.
     * 
    **/
    data: Enumerable<studentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * student update
   */
  export type studentUpdateArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * The data needed to update a student.
     * 
    **/
    data: XOR<studentUpdateInput, studentUncheckedUpdateInput>
    /**
     * Choose, which student to update.
     * 
    **/
    where: studentWhereUniqueInput
  }


  /**
   * student updateMany
   */
  export type studentUpdateManyArgs = {
    /**
     * The data used to update students.
     * 
    **/
    data: XOR<studentUpdateManyMutationInput, studentUncheckedUpdateManyInput>
    /**
     * Filter which students to update
     * 
    **/
    where?: studentWhereInput
  }


  /**
   * student upsert
   */
  export type studentUpsertArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * The filter to search for the student to update in case it exists.
     * 
    **/
    where: studentWhereUniqueInput
    /**
     * In case the student found by the `where` argument doesn't exist, create a new student with this data.
     * 
    **/
    create: XOR<studentCreateInput, studentUncheckedCreateInput>
    /**
     * In case the student was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<studentUpdateInput, studentUncheckedUpdateInput>
  }


  /**
   * student delete
   */
  export type studentDeleteArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * Filter which student to delete.
     * 
    **/
    where: studentWhereUniqueInput
  }


  /**
   * student deleteMany
   */
  export type studentDeleteManyArgs = {
    /**
     * Filter which students to delete
     * 
    **/
    where?: studentWhereInput
  }


  /**
   * student without action
   */
  export type studentArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
  }



  /**
   * Model user_account
   */


  export type AggregateUser_account = {
    _count: User_accountCountAggregateOutputType | null
    _avg: User_accountAvgAggregateOutputType | null
    _sum: User_accountSumAggregateOutputType | null
    _min: User_accountMinAggregateOutputType | null
    _max: User_accountMaxAggregateOutputType | null
  }

  export type User_accountAvgAggregateOutputType = {
    account_id: number | null
  }

  export type User_accountSumAggregateOutputType = {
    account_id: number | null
  }

  export type User_accountMinAggregateOutputType = {
    account_id: number | null
    student_uid: string | null
    username: string | null
    password: string | null
  }

  export type User_accountMaxAggregateOutputType = {
    account_id: number | null
    student_uid: string | null
    username: string | null
    password: string | null
  }

  export type User_accountCountAggregateOutputType = {
    account_id: number
    student_uid: number
    username: number
    password: number
    _all: number
  }


  export type User_accountAvgAggregateInputType = {
    account_id?: true
  }

  export type User_accountSumAggregateInputType = {
    account_id?: true
  }

  export type User_accountMinAggregateInputType = {
    account_id?: true
    student_uid?: true
    username?: true
    password?: true
  }

  export type User_accountMaxAggregateInputType = {
    account_id?: true
    student_uid?: true
    username?: true
    password?: true
  }

  export type User_accountCountAggregateInputType = {
    account_id?: true
    student_uid?: true
    username?: true
    password?: true
    _all?: true
  }

  export type User_accountAggregateArgs = {
    /**
     * Filter which user_account to aggregate.
     * 
    **/
    where?: user_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<user_accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_accounts
    **/
    _count?: true | User_accountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_accountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_accountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_accountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_accountMaxAggregateInputType
  }

  export type GetUser_accountAggregateType<T extends User_accountAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_account]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_account[P]>
      : GetScalarType<T[P], AggregateUser_account[P]>
  }




  export type User_accountGroupByArgs = {
    where?: user_accountWhereInput
    orderBy?: Enumerable<user_accountOrderByWithAggregationInput>
    by: Array<User_accountScalarFieldEnum>
    having?: user_accountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_accountCountAggregateInputType | true
    _avg?: User_accountAvgAggregateInputType
    _sum?: User_accountSumAggregateInputType
    _min?: User_accountMinAggregateInputType
    _max?: User_accountMaxAggregateInputType
  }


  export type User_accountGroupByOutputType = {
    account_id: number
    student_uid: string | null
    username: string
    password: string
    _count: User_accountCountAggregateOutputType | null
    _avg: User_accountAvgAggregateOutputType | null
    _sum: User_accountSumAggregateOutputType | null
    _min: User_accountMinAggregateOutputType | null
    _max: User_accountMaxAggregateOutputType | null
  }

  type GetUser_accountGroupByPayload<T extends User_accountGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_accountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_accountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_accountGroupByOutputType[P]>
            : GetScalarType<T[P], User_accountGroupByOutputType[P]>
        }
      >
    >


  export type user_accountSelect = {
    account_id?: boolean
    student_uid?: boolean
    username?: boolean
    password?: boolean
    student?: boolean | studentArgs
    faq?: boolean | faqFindManyArgs
    placement?: boolean | placementFindManyArgs
    remarks?: boolean | remarksFindManyArgs
    _count?: boolean | User_accountCountOutputTypeArgs
  }

  export type user_accountInclude = {
    student?: boolean | studentArgs
    faq?: boolean | faqFindManyArgs
    placement?: boolean | placementFindManyArgs
    remarks?: boolean | remarksFindManyArgs
    _count?: boolean | User_accountCountOutputTypeArgs
  }

  export type user_accountGetPayload<
    S extends boolean | null | undefined | user_accountArgs,
    U = keyof S
      > = S extends true
        ? user_account
    : S extends undefined
    ? never
    : S extends user_accountArgs | user_accountFindManyArgs
    ?'include' extends U
    ? user_account  & {
    [P in TrueKeys<S['include']>]:
        P extends 'student' ? studentGetPayload<S['include'][P]> | null :
        P extends 'faq' ? Array < faqGetPayload<S['include'][P]>>  :
        P extends 'placement' ? Array < placementGetPayload<S['include'][P]>>  :
        P extends 'remarks' ? Array < remarksGetPayload<S['include'][P]>>  :
        P extends '_count' ? User_accountCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'student' ? studentGetPayload<S['select'][P]> | null :
        P extends 'faq' ? Array < faqGetPayload<S['select'][P]>>  :
        P extends 'placement' ? Array < placementGetPayload<S['select'][P]>>  :
        P extends 'remarks' ? Array < remarksGetPayload<S['select'][P]>>  :
        P extends '_count' ? User_accountCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user_account ? user_account[P] : never
  } 
    : user_account
  : user_account


  type user_accountCountArgs = Merge<
    Omit<user_accountFindManyArgs, 'select' | 'include'> & {
      select?: User_accountCountAggregateInputType | true
    }
  >

  export interface user_accountDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User_account that matches the filter.
     * @param {user_accountFindUniqueArgs} args - Arguments to find a User_account
     * @example
     * // Get one User_account
     * const user_account = await prisma.user_account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_accountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_accountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_account'> extends True ? CheckSelect<T, Prisma__user_accountClient<user_account>, Prisma__user_accountClient<user_accountGetPayload<T>>> : CheckSelect<T, Prisma__user_accountClient<user_account | null >, Prisma__user_accountClient<user_accountGetPayload<T> | null >>

    /**
     * Find the first User_account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountFindFirstArgs} args - Arguments to find a User_account
     * @example
     * // Get one User_account
     * const user_account = await prisma.user_account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_accountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_accountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_account'> extends True ? CheckSelect<T, Prisma__user_accountClient<user_account>, Prisma__user_accountClient<user_accountGetPayload<T>>> : CheckSelect<T, Prisma__user_accountClient<user_account | null >, Prisma__user_accountClient<user_accountGetPayload<T> | null >>

    /**
     * Find zero or more User_accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_accounts
     * const user_accounts = await prisma.user_account.findMany()
     * 
     * // Get first 10 User_accounts
     * const user_accounts = await prisma.user_account.findMany({ take: 10 })
     * 
     * // Only select the `account_id`
     * const user_accountWithAccount_idOnly = await prisma.user_account.findMany({ select: { account_id: true } })
     * 
    **/
    findMany<T extends user_accountFindManyArgs>(
      args?: SelectSubset<T, user_accountFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_account>>, PrismaPromise<Array<user_accountGetPayload<T>>>>

    /**
     * Create a User_account.
     * @param {user_accountCreateArgs} args - Arguments to create a User_account.
     * @example
     * // Create one User_account
     * const User_account = await prisma.user_account.create({
     *   data: {
     *     // ... data to create a User_account
     *   }
     * })
     * 
    **/
    create<T extends user_accountCreateArgs>(
      args: SelectSubset<T, user_accountCreateArgs>
    ): CheckSelect<T, Prisma__user_accountClient<user_account>, Prisma__user_accountClient<user_accountGetPayload<T>>>

    /**
     * Create many User_accounts.
     *     @param {user_accountCreateManyArgs} args - Arguments to create many User_accounts.
     *     @example
     *     // Create many User_accounts
     *     const user_account = await prisma.user_account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_accountCreateManyArgs>(
      args?: SelectSubset<T, user_accountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_account.
     * @param {user_accountDeleteArgs} args - Arguments to delete one User_account.
     * @example
     * // Delete one User_account
     * const User_account = await prisma.user_account.delete({
     *   where: {
     *     // ... filter to delete one User_account
     *   }
     * })
     * 
    **/
    delete<T extends user_accountDeleteArgs>(
      args: SelectSubset<T, user_accountDeleteArgs>
    ): CheckSelect<T, Prisma__user_accountClient<user_account>, Prisma__user_accountClient<user_accountGetPayload<T>>>

    /**
     * Update one User_account.
     * @param {user_accountUpdateArgs} args - Arguments to update one User_account.
     * @example
     * // Update one User_account
     * const user_account = await prisma.user_account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_accountUpdateArgs>(
      args: SelectSubset<T, user_accountUpdateArgs>
    ): CheckSelect<T, Prisma__user_accountClient<user_account>, Prisma__user_accountClient<user_accountGetPayload<T>>>

    /**
     * Delete zero or more User_accounts.
     * @param {user_accountDeleteManyArgs} args - Arguments to filter User_accounts to delete.
     * @example
     * // Delete a few User_accounts
     * const { count } = await prisma.user_account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_accountDeleteManyArgs>(
      args?: SelectSubset<T, user_accountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_accounts
     * const user_account = await prisma.user_account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_accountUpdateManyArgs>(
      args: SelectSubset<T, user_accountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_account.
     * @param {user_accountUpsertArgs} args - Arguments to update or create a User_account.
     * @example
     * // Update or create a User_account
     * const user_account = await prisma.user_account.upsert({
     *   create: {
     *     // ... data to create a User_account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_account we want to update
     *   }
     * })
    **/
    upsert<T extends user_accountUpsertArgs>(
      args: SelectSubset<T, user_accountUpsertArgs>
    ): CheckSelect<T, Prisma__user_accountClient<user_account>, Prisma__user_accountClient<user_accountGetPayload<T>>>

    /**
     * Count the number of User_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountCountArgs} args - Arguments to filter User_accounts to count.
     * @example
     * // Count the number of User_accounts
     * const count = await prisma.user_account.count({
     *   where: {
     *     // ... the filter for the User_accounts we want to count
     *   }
     * })
    **/
    count<T extends user_accountCountArgs>(
      args?: Subset<T, user_accountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_accountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_accountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_accountAggregateArgs>(args: Subset<T, User_accountAggregateArgs>): PrismaPromise<GetUser_accountAggregateType<T>>

    /**
     * Group by User_account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_accountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_accountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_accountGroupByArgs['orderBy'] }
        : { orderBy?: User_accountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_accountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_accountGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_accountClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    student<T extends studentArgs = {}>(args?: Subset<T, studentArgs>): CheckSelect<T, Prisma__studentClient<student | null >, Prisma__studentClient<studentGetPayload<T> | null >>;

    faq<T extends faqFindManyArgs = {}>(args?: Subset<T, faqFindManyArgs>): CheckSelect<T, PrismaPromise<Array<faq>>, PrismaPromise<Array<faqGetPayload<T>>>>;

    placement<T extends placementFindManyArgs = {}>(args?: Subset<T, placementFindManyArgs>): CheckSelect<T, PrismaPromise<Array<placement>>, PrismaPromise<Array<placementGetPayload<T>>>>;

    remarks<T extends remarksFindManyArgs = {}>(args?: Subset<T, remarksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<remarks>>, PrismaPromise<Array<remarksGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_account findUnique
   */
  export type user_accountFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user_account
     * 
    **/
    select?: user_accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_accountInclude | null
    /**
     * Throw an Error if a user_account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_account to fetch.
     * 
    **/
    where: user_accountWhereUniqueInput
  }


  /**
   * user_account findFirst
   */
  export type user_accountFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user_account
     * 
    **/
    select?: user_accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_accountInclude | null
    /**
     * Throw an Error if a user_account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_account to fetch.
     * 
    **/
    where?: user_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<user_accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_accounts.
     * 
    **/
    cursor?: user_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_accounts.
     * 
    **/
    distinct?: Enumerable<User_accountScalarFieldEnum>
  }


  /**
   * user_account findMany
   */
  export type user_accountFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_account
     * 
    **/
    select?: user_accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_accountInclude | null
    /**
     * Filter, which user_accounts to fetch.
     * 
    **/
    where?: user_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<user_accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_accounts.
     * 
    **/
    cursor?: user_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_accountScalarFieldEnum>
  }


  /**
   * user_account create
   */
  export type user_accountCreateArgs = {
    /**
     * Select specific fields to fetch from the user_account
     * 
    **/
    select?: user_accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_accountInclude | null
    /**
     * The data needed to create a user_account.
     * 
    **/
    data: XOR<user_accountCreateInput, user_accountUncheckedCreateInput>
  }


  /**
   * user_account createMany
   */
  export type user_accountCreateManyArgs = {
    /**
     * The data used to create many user_accounts.
     * 
    **/
    data: Enumerable<user_accountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_account update
   */
  export type user_accountUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_account
     * 
    **/
    select?: user_accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_accountInclude | null
    /**
     * The data needed to update a user_account.
     * 
    **/
    data: XOR<user_accountUpdateInput, user_accountUncheckedUpdateInput>
    /**
     * Choose, which user_account to update.
     * 
    **/
    where: user_accountWhereUniqueInput
  }


  /**
   * user_account updateMany
   */
  export type user_accountUpdateManyArgs = {
    /**
     * The data used to update user_accounts.
     * 
    **/
    data: XOR<user_accountUpdateManyMutationInput, user_accountUncheckedUpdateManyInput>
    /**
     * Filter which user_accounts to update
     * 
    **/
    where?: user_accountWhereInput
  }


  /**
   * user_account upsert
   */
  export type user_accountUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_account
     * 
    **/
    select?: user_accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_accountInclude | null
    /**
     * The filter to search for the user_account to update in case it exists.
     * 
    **/
    where: user_accountWhereUniqueInput
    /**
     * In case the user_account found by the `where` argument doesn't exist, create a new user_account with this data.
     * 
    **/
    create: XOR<user_accountCreateInput, user_accountUncheckedCreateInput>
    /**
     * In case the user_account was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_accountUpdateInput, user_accountUncheckedUpdateInput>
  }


  /**
   * user_account delete
   */
  export type user_accountDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_account
     * 
    **/
    select?: user_accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_accountInclude | null
    /**
     * Filter which user_account to delete.
     * 
    **/
    where: user_accountWhereUniqueInput
  }


  /**
   * user_account deleteMany
   */
  export type user_accountDeleteManyArgs = {
    /**
     * Filter which user_accounts to delete
     * 
    **/
    where?: user_accountWhereInput
  }


  /**
   * user_account without action
   */
  export type user_accountArgs = {
    /**
     * Select specific fields to fetch from the user_account
     * 
    **/
    select?: user_accountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_accountInclude | null
  }



  /**
   * Model placement
   */


  export type AggregatePlacement = {
    _count: PlacementCountAggregateOutputType | null
    _avg: PlacementAvgAggregateOutputType | null
    _sum: PlacementSumAggregateOutputType | null
    _min: PlacementMinAggregateOutputType | null
    _max: PlacementMaxAggregateOutputType | null
  }

  export type PlacementAvgAggregateOutputType = {
    placement_id: number | null
    salary: Decimal | null
  }

  export type PlacementSumAggregateOutputType = {
    placement_id: number | null
    salary: Decimal | null
  }

  export type PlacementMinAggregateOutputType = {
    placement_id: number | null
    username: string | null
    student_uid: string | null
    placement_year: string | null
    appointment_letter: string | null
    feedback_form: string | null
    feedback_comment: string | null
    company_name: string | null
    job_title: string | null
    job_nature: string | null
    employment_duration: string | null
    start_date: Date | null
    end_date: Date | null
    working_location: string | null
    salary: Decimal | null
    payment_type: placement_payment_type | null
    supervisor_name: string | null
    supervisor_telephone: string | null
    supervisor_email: string | null
    modified_by: string | null
    last_modified: Date | null
    created_by: string | null
    creation_time: Date | null
    consent_form: string | null
  }

  export type PlacementMaxAggregateOutputType = {
    placement_id: number | null
    username: string | null
    student_uid: string | null
    placement_year: string | null
    appointment_letter: string | null
    feedback_form: string | null
    feedback_comment: string | null
    company_name: string | null
    job_title: string | null
    job_nature: string | null
    employment_duration: string | null
    start_date: Date | null
    end_date: Date | null
    working_location: string | null
    salary: Decimal | null
    payment_type: placement_payment_type | null
    supervisor_name: string | null
    supervisor_telephone: string | null
    supervisor_email: string | null
    modified_by: string | null
    last_modified: Date | null
    created_by: string | null
    creation_time: Date | null
    consent_form: string | null
  }

  export type PlacementCountAggregateOutputType = {
    placement_id: number
    username: number
    student_uid: number
    placement_year: number
    appointment_letter: number
    feedback_form: number
    feedback_comment: number
    company_name: number
    job_title: number
    job_nature: number
    employment_duration: number
    start_date: number
    end_date: number
    working_location: number
    salary: number
    payment_type: number
    supervisor_name: number
    supervisor_telephone: number
    supervisor_email: number
    modified_by: number
    last_modified: number
    created_by: number
    creation_time: number
    consent_form: number
    _all: number
  }


  export type PlacementAvgAggregateInputType = {
    placement_id?: true
    salary?: true
  }

  export type PlacementSumAggregateInputType = {
    placement_id?: true
    salary?: true
  }

  export type PlacementMinAggregateInputType = {
    placement_id?: true
    username?: true
    student_uid?: true
    placement_year?: true
    appointment_letter?: true
    feedback_form?: true
    feedback_comment?: true
    company_name?: true
    job_title?: true
    job_nature?: true
    employment_duration?: true
    start_date?: true
    end_date?: true
    working_location?: true
    salary?: true
    payment_type?: true
    supervisor_name?: true
    supervisor_telephone?: true
    supervisor_email?: true
    modified_by?: true
    last_modified?: true
    created_by?: true
    creation_time?: true
    consent_form?: true
  }

  export type PlacementMaxAggregateInputType = {
    placement_id?: true
    username?: true
    student_uid?: true
    placement_year?: true
    appointment_letter?: true
    feedback_form?: true
    feedback_comment?: true
    company_name?: true
    job_title?: true
    job_nature?: true
    employment_duration?: true
    start_date?: true
    end_date?: true
    working_location?: true
    salary?: true
    payment_type?: true
    supervisor_name?: true
    supervisor_telephone?: true
    supervisor_email?: true
    modified_by?: true
    last_modified?: true
    created_by?: true
    creation_time?: true
    consent_form?: true
  }

  export type PlacementCountAggregateInputType = {
    placement_id?: true
    username?: true
    student_uid?: true
    placement_year?: true
    appointment_letter?: true
    feedback_form?: true
    feedback_comment?: true
    company_name?: true
    job_title?: true
    job_nature?: true
    employment_duration?: true
    start_date?: true
    end_date?: true
    working_location?: true
    salary?: true
    payment_type?: true
    supervisor_name?: true
    supervisor_telephone?: true
    supervisor_email?: true
    modified_by?: true
    last_modified?: true
    created_by?: true
    creation_time?: true
    consent_form?: true
    _all?: true
  }

  export type PlacementAggregateArgs = {
    /**
     * Filter which placement to aggregate.
     * 
    **/
    where?: placementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of placements to fetch.
     * 
    **/
    orderBy?: Enumerable<placementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: placementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` placements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` placements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned placements
    **/
    _count?: true | PlacementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlacementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlacementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlacementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlacementMaxAggregateInputType
  }

  export type GetPlacementAggregateType<T extends PlacementAggregateArgs> = {
        [P in keyof T & keyof AggregatePlacement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlacement[P]>
      : GetScalarType<T[P], AggregatePlacement[P]>
  }




  export type PlacementGroupByArgs = {
    where?: placementWhereInput
    orderBy?: Enumerable<placementOrderByWithAggregationInput>
    by: Array<PlacementScalarFieldEnum>
    having?: placementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlacementCountAggregateInputType | true
    _avg?: PlacementAvgAggregateInputType
    _sum?: PlacementSumAggregateInputType
    _min?: PlacementMinAggregateInputType
    _max?: PlacementMaxAggregateInputType
  }


  export type PlacementGroupByOutputType = {
    placement_id: number
    username: string
    student_uid: string
    placement_year: string
    appointment_letter: string | null
    feedback_form: string | null
    feedback_comment: string | null
    company_name: string | null
    job_title: string | null
    job_nature: string | null
    employment_duration: string | null
    start_date: Date | null
    end_date: Date | null
    working_location: string | null
    salary: Decimal | null
    payment_type: placement_payment_type | null
    supervisor_name: string | null
    supervisor_telephone: string | null
    supervisor_email: string | null
    modified_by: string
    last_modified: Date
    created_by: string
    creation_time: Date
    consent_form: string | null
    _count: PlacementCountAggregateOutputType | null
    _avg: PlacementAvgAggregateOutputType | null
    _sum: PlacementSumAggregateOutputType | null
    _min: PlacementMinAggregateOutputType | null
    _max: PlacementMaxAggregateOutputType | null
  }

  type GetPlacementGroupByPayload<T extends PlacementGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PlacementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlacementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlacementGroupByOutputType[P]>
            : GetScalarType<T[P], PlacementGroupByOutputType[P]>
        }
      >
    >


  export type placementSelect = {
    placement_id?: boolean
    username?: boolean
    student_uid?: boolean
    placement_year?: boolean
    appointment_letter?: boolean
    feedback_form?: boolean
    feedback_comment?: boolean
    company_name?: boolean
    job_title?: boolean
    job_nature?: boolean
    employment_duration?: boolean
    start_date?: boolean
    end_date?: boolean
    working_location?: boolean
    salary?: boolean
    payment_type?: boolean
    supervisor_name?: boolean
    supervisor_telephone?: boolean
    supervisor_email?: boolean
    modified_by?: boolean
    last_modified?: boolean
    created_by?: boolean
    creation_time?: boolean
    consent_form?: boolean
    student?: boolean | studentArgs
    user_account?: boolean | user_accountArgs
    remarks?: boolean | remarksFindManyArgs
    _count?: boolean | PlacementCountOutputTypeArgs
  }

  export type placementInclude = {
    student?: boolean | studentArgs
    user_account?: boolean | user_accountArgs
    remarks?: boolean | remarksFindManyArgs
    _count?: boolean | PlacementCountOutputTypeArgs
  }

  export type placementGetPayload<
    S extends boolean | null | undefined | placementArgs,
    U = keyof S
      > = S extends true
        ? placement
    : S extends undefined
    ? never
    : S extends placementArgs | placementFindManyArgs
    ?'include' extends U
    ? placement  & {
    [P in TrueKeys<S['include']>]:
        P extends 'student' ? studentGetPayload<S['include'][P]> :
        P extends 'user_account' ? user_accountGetPayload<S['include'][P]> :
        P extends 'remarks' ? Array < remarksGetPayload<S['include'][P]>>  :
        P extends '_count' ? PlacementCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'student' ? studentGetPayload<S['select'][P]> :
        P extends 'user_account' ? user_accountGetPayload<S['select'][P]> :
        P extends 'remarks' ? Array < remarksGetPayload<S['select'][P]>>  :
        P extends '_count' ? PlacementCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof placement ? placement[P] : never
  } 
    : placement
  : placement


  type placementCountArgs = Merge<
    Omit<placementFindManyArgs, 'select' | 'include'> & {
      select?: PlacementCountAggregateInputType | true
    }
  >

  export interface placementDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Placement that matches the filter.
     * @param {placementFindUniqueArgs} args - Arguments to find a Placement
     * @example
     * // Get one Placement
     * const placement = await prisma.placement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends placementFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, placementFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'placement'> extends True ? CheckSelect<T, Prisma__placementClient<placement>, Prisma__placementClient<placementGetPayload<T>>> : CheckSelect<T, Prisma__placementClient<placement | null >, Prisma__placementClient<placementGetPayload<T> | null >>

    /**
     * Find the first Placement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placementFindFirstArgs} args - Arguments to find a Placement
     * @example
     * // Get one Placement
     * const placement = await prisma.placement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends placementFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, placementFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'placement'> extends True ? CheckSelect<T, Prisma__placementClient<placement>, Prisma__placementClient<placementGetPayload<T>>> : CheckSelect<T, Prisma__placementClient<placement | null >, Prisma__placementClient<placementGetPayload<T> | null >>

    /**
     * Find zero or more Placements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Placements
     * const placements = await prisma.placement.findMany()
     * 
     * // Get first 10 Placements
     * const placements = await prisma.placement.findMany({ take: 10 })
     * 
     * // Only select the `placement_id`
     * const placementWithPlacement_idOnly = await prisma.placement.findMany({ select: { placement_id: true } })
     * 
    **/
    findMany<T extends placementFindManyArgs>(
      args?: SelectSubset<T, placementFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<placement>>, PrismaPromise<Array<placementGetPayload<T>>>>

    /**
     * Create a Placement.
     * @param {placementCreateArgs} args - Arguments to create a Placement.
     * @example
     * // Create one Placement
     * const Placement = await prisma.placement.create({
     *   data: {
     *     // ... data to create a Placement
     *   }
     * })
     * 
    **/
    create<T extends placementCreateArgs>(
      args: SelectSubset<T, placementCreateArgs>
    ): CheckSelect<T, Prisma__placementClient<placement>, Prisma__placementClient<placementGetPayload<T>>>

    /**
     * Create many Placements.
     *     @param {placementCreateManyArgs} args - Arguments to create many Placements.
     *     @example
     *     // Create many Placements
     *     const placement = await prisma.placement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends placementCreateManyArgs>(
      args?: SelectSubset<T, placementCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Placement.
     * @param {placementDeleteArgs} args - Arguments to delete one Placement.
     * @example
     * // Delete one Placement
     * const Placement = await prisma.placement.delete({
     *   where: {
     *     // ... filter to delete one Placement
     *   }
     * })
     * 
    **/
    delete<T extends placementDeleteArgs>(
      args: SelectSubset<T, placementDeleteArgs>
    ): CheckSelect<T, Prisma__placementClient<placement>, Prisma__placementClient<placementGetPayload<T>>>

    /**
     * Update one Placement.
     * @param {placementUpdateArgs} args - Arguments to update one Placement.
     * @example
     * // Update one Placement
     * const placement = await prisma.placement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends placementUpdateArgs>(
      args: SelectSubset<T, placementUpdateArgs>
    ): CheckSelect<T, Prisma__placementClient<placement>, Prisma__placementClient<placementGetPayload<T>>>

    /**
     * Delete zero or more Placements.
     * @param {placementDeleteManyArgs} args - Arguments to filter Placements to delete.
     * @example
     * // Delete a few Placements
     * const { count } = await prisma.placement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends placementDeleteManyArgs>(
      args?: SelectSubset<T, placementDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Placements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Placements
     * const placement = await prisma.placement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends placementUpdateManyArgs>(
      args: SelectSubset<T, placementUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Placement.
     * @param {placementUpsertArgs} args - Arguments to update or create a Placement.
     * @example
     * // Update or create a Placement
     * const placement = await prisma.placement.upsert({
     *   create: {
     *     // ... data to create a Placement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Placement we want to update
     *   }
     * })
    **/
    upsert<T extends placementUpsertArgs>(
      args: SelectSubset<T, placementUpsertArgs>
    ): CheckSelect<T, Prisma__placementClient<placement>, Prisma__placementClient<placementGetPayload<T>>>

    /**
     * Count the number of Placements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placementCountArgs} args - Arguments to filter Placements to count.
     * @example
     * // Count the number of Placements
     * const count = await prisma.placement.count({
     *   where: {
     *     // ... the filter for the Placements we want to count
     *   }
     * })
    **/
    count<T extends placementCountArgs>(
      args?: Subset<T, placementCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlacementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Placement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlacementAggregateArgs>(args: Subset<T, PlacementAggregateArgs>): PrismaPromise<GetPlacementAggregateType<T>>

    /**
     * Group by Placement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlacementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlacementGroupByArgs['orderBy'] }
        : { orderBy?: PlacementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlacementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlacementGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for placement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__placementClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    student<T extends studentArgs = {}>(args?: Subset<T, studentArgs>): CheckSelect<T, Prisma__studentClient<student | null >, Prisma__studentClient<studentGetPayload<T> | null >>;

    user_account<T extends user_accountArgs = {}>(args?: Subset<T, user_accountArgs>): CheckSelect<T, Prisma__user_accountClient<user_account | null >, Prisma__user_accountClient<user_accountGetPayload<T> | null >>;

    remarks<T extends remarksFindManyArgs = {}>(args?: Subset<T, remarksFindManyArgs>): CheckSelect<T, PrismaPromise<Array<remarks>>, PrismaPromise<Array<remarksGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * placement findUnique
   */
  export type placementFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the placement
     * 
    **/
    select?: placementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placementInclude | null
    /**
     * Throw an Error if a placement can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which placement to fetch.
     * 
    **/
    where: placementWhereUniqueInput
  }


  /**
   * placement findFirst
   */
  export type placementFindFirstArgs = {
    /**
     * Select specific fields to fetch from the placement
     * 
    **/
    select?: placementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placementInclude | null
    /**
     * Throw an Error if a placement can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which placement to fetch.
     * 
    **/
    where?: placementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of placements to fetch.
     * 
    **/
    orderBy?: Enumerable<placementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for placements.
     * 
    **/
    cursor?: placementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` placements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` placements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of placements.
     * 
    **/
    distinct?: Enumerable<PlacementScalarFieldEnum>
  }


  /**
   * placement findMany
   */
  export type placementFindManyArgs = {
    /**
     * Select specific fields to fetch from the placement
     * 
    **/
    select?: placementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placementInclude | null
    /**
     * Filter, which placements to fetch.
     * 
    **/
    where?: placementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of placements to fetch.
     * 
    **/
    orderBy?: Enumerable<placementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing placements.
     * 
    **/
    cursor?: placementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` placements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` placements.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PlacementScalarFieldEnum>
  }


  /**
   * placement create
   */
  export type placementCreateArgs = {
    /**
     * Select specific fields to fetch from the placement
     * 
    **/
    select?: placementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placementInclude | null
    /**
     * The data needed to create a placement.
     * 
    **/
    data: XOR<placementCreateInput, placementUncheckedCreateInput>
  }


  /**
   * placement createMany
   */
  export type placementCreateManyArgs = {
    /**
     * The data used to create many placements.
     * 
    **/
    data: Enumerable<placementCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * placement update
   */
  export type placementUpdateArgs = {
    /**
     * Select specific fields to fetch from the placement
     * 
    **/
    select?: placementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placementInclude | null
    /**
     * The data needed to update a placement.
     * 
    **/
    data: XOR<placementUpdateInput, placementUncheckedUpdateInput>
    /**
     * Choose, which placement to update.
     * 
    **/
    where: placementWhereUniqueInput
  }


  /**
   * placement updateMany
   */
  export type placementUpdateManyArgs = {
    /**
     * The data used to update placements.
     * 
    **/
    data: XOR<placementUpdateManyMutationInput, placementUncheckedUpdateManyInput>
    /**
     * Filter which placements to update
     * 
    **/
    where?: placementWhereInput
  }


  /**
   * placement upsert
   */
  export type placementUpsertArgs = {
    /**
     * Select specific fields to fetch from the placement
     * 
    **/
    select?: placementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placementInclude | null
    /**
     * The filter to search for the placement to update in case it exists.
     * 
    **/
    where: placementWhereUniqueInput
    /**
     * In case the placement found by the `where` argument doesn't exist, create a new placement with this data.
     * 
    **/
    create: XOR<placementCreateInput, placementUncheckedCreateInput>
    /**
     * In case the placement was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<placementUpdateInput, placementUncheckedUpdateInput>
  }


  /**
   * placement delete
   */
  export type placementDeleteArgs = {
    /**
     * Select specific fields to fetch from the placement
     * 
    **/
    select?: placementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placementInclude | null
    /**
     * Filter which placement to delete.
     * 
    **/
    where: placementWhereUniqueInput
  }


  /**
   * placement deleteMany
   */
  export type placementDeleteManyArgs = {
    /**
     * Filter which placements to delete
     * 
    **/
    where?: placementWhereInput
  }


  /**
   * placement without action
   */
  export type placementArgs = {
    /**
     * Select specific fields to fetch from the placement
     * 
    **/
    select?: placementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: placementInclude | null
  }



  /**
   * Model faq
   */


  export type AggregateFaq = {
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  export type FaqAvgAggregateOutputType = {
    faq_id: number | null
    account_id: number | null
  }

  export type FaqSumAggregateOutputType = {
    faq_id: number | null
    account_id: number | null
  }

  export type FaqMinAggregateOutputType = {
    faq_id: number | null
    account_id: number | null
    questions: string | null
    answers: string | null
    last_modified: Date | null
    cat: string | null
  }

  export type FaqMaxAggregateOutputType = {
    faq_id: number | null
    account_id: number | null
    questions: string | null
    answers: string | null
    last_modified: Date | null
    cat: string | null
  }

  export type FaqCountAggregateOutputType = {
    faq_id: number
    account_id: number
    questions: number
    answers: number
    last_modified: number
    cat: number
    _all: number
  }


  export type FaqAvgAggregateInputType = {
    faq_id?: true
    account_id?: true
  }

  export type FaqSumAggregateInputType = {
    faq_id?: true
    account_id?: true
  }

  export type FaqMinAggregateInputType = {
    faq_id?: true
    account_id?: true
    questions?: true
    answers?: true
    last_modified?: true
    cat?: true
  }

  export type FaqMaxAggregateInputType = {
    faq_id?: true
    account_id?: true
    questions?: true
    answers?: true
    last_modified?: true
    cat?: true
  }

  export type FaqCountAggregateInputType = {
    faq_id?: true
    account_id?: true
    questions?: true
    answers?: true
    last_modified?: true
    cat?: true
    _all?: true
  }

  export type FaqAggregateArgs = {
    /**
     * Filter which faq to aggregate.
     * 
    **/
    where?: faqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs to fetch.
     * 
    **/
    orderBy?: Enumerable<faqOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: faqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned faqs
    **/
    _count?: true | FaqCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaqAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaqSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaqMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaqMaxAggregateInputType
  }

  export type GetFaqAggregateType<T extends FaqAggregateArgs> = {
        [P in keyof T & keyof AggregateFaq]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaq[P]>
      : GetScalarType<T[P], AggregateFaq[P]>
  }




  export type FaqGroupByArgs = {
    where?: faqWhereInput
    orderBy?: Enumerable<faqOrderByWithAggregationInput>
    by: Array<FaqScalarFieldEnum>
    having?: faqScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaqCountAggregateInputType | true
    _avg?: FaqAvgAggregateInputType
    _sum?: FaqSumAggregateInputType
    _min?: FaqMinAggregateInputType
    _max?: FaqMaxAggregateInputType
  }


  export type FaqGroupByOutputType = {
    faq_id: number
    account_id: number
    questions: string | null
    answers: string | null
    last_modified: Date
    cat: string | null
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  type GetFaqGroupByPayload<T extends FaqGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FaqGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaqGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaqGroupByOutputType[P]>
            : GetScalarType<T[P], FaqGroupByOutputType[P]>
        }
      >
    >


  export type faqSelect = {
    faq_id?: boolean
    account_id?: boolean
    questions?: boolean
    answers?: boolean
    last_modified?: boolean
    cat?: boolean
    user_account?: boolean | user_accountArgs
  }

  export type faqInclude = {
    user_account?: boolean | user_accountArgs
  }

  export type faqGetPayload<
    S extends boolean | null | undefined | faqArgs,
    U = keyof S
      > = S extends true
        ? faq
    : S extends undefined
    ? never
    : S extends faqArgs | faqFindManyArgs
    ?'include' extends U
    ? faq  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user_account' ? user_accountGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user_account' ? user_accountGetPayload<S['select'][P]> :  P extends keyof faq ? faq[P] : never
  } 
    : faq
  : faq


  type faqCountArgs = Merge<
    Omit<faqFindManyArgs, 'select' | 'include'> & {
      select?: FaqCountAggregateInputType | true
    }
  >

  export interface faqDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Faq that matches the filter.
     * @param {faqFindUniqueArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends faqFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, faqFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'faq'> extends True ? CheckSelect<T, Prisma__faqClient<faq>, Prisma__faqClient<faqGetPayload<T>>> : CheckSelect<T, Prisma__faqClient<faq | null >, Prisma__faqClient<faqGetPayload<T> | null >>

    /**
     * Find the first Faq that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqFindFirstArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends faqFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, faqFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'faq'> extends True ? CheckSelect<T, Prisma__faqClient<faq>, Prisma__faqClient<faqGetPayload<T>>> : CheckSelect<T, Prisma__faqClient<faq | null >, Prisma__faqClient<faqGetPayload<T> | null >>

    /**
     * Find zero or more Faqs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faqs
     * const faqs = await prisma.faq.findMany()
     * 
     * // Get first 10 Faqs
     * const faqs = await prisma.faq.findMany({ take: 10 })
     * 
     * // Only select the `faq_id`
     * const faqWithFaq_idOnly = await prisma.faq.findMany({ select: { faq_id: true } })
     * 
    **/
    findMany<T extends faqFindManyArgs>(
      args?: SelectSubset<T, faqFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<faq>>, PrismaPromise<Array<faqGetPayload<T>>>>

    /**
     * Create a Faq.
     * @param {faqCreateArgs} args - Arguments to create a Faq.
     * @example
     * // Create one Faq
     * const Faq = await prisma.faq.create({
     *   data: {
     *     // ... data to create a Faq
     *   }
     * })
     * 
    **/
    create<T extends faqCreateArgs>(
      args: SelectSubset<T, faqCreateArgs>
    ): CheckSelect<T, Prisma__faqClient<faq>, Prisma__faqClient<faqGetPayload<T>>>

    /**
     * Create many Faqs.
     *     @param {faqCreateManyArgs} args - Arguments to create many Faqs.
     *     @example
     *     // Create many Faqs
     *     const faq = await prisma.faq.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends faqCreateManyArgs>(
      args?: SelectSubset<T, faqCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Faq.
     * @param {faqDeleteArgs} args - Arguments to delete one Faq.
     * @example
     * // Delete one Faq
     * const Faq = await prisma.faq.delete({
     *   where: {
     *     // ... filter to delete one Faq
     *   }
     * })
     * 
    **/
    delete<T extends faqDeleteArgs>(
      args: SelectSubset<T, faqDeleteArgs>
    ): CheckSelect<T, Prisma__faqClient<faq>, Prisma__faqClient<faqGetPayload<T>>>

    /**
     * Update one Faq.
     * @param {faqUpdateArgs} args - Arguments to update one Faq.
     * @example
     * // Update one Faq
     * const faq = await prisma.faq.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends faqUpdateArgs>(
      args: SelectSubset<T, faqUpdateArgs>
    ): CheckSelect<T, Prisma__faqClient<faq>, Prisma__faqClient<faqGetPayload<T>>>

    /**
     * Delete zero or more Faqs.
     * @param {faqDeleteManyArgs} args - Arguments to filter Faqs to delete.
     * @example
     * // Delete a few Faqs
     * const { count } = await prisma.faq.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends faqDeleteManyArgs>(
      args?: SelectSubset<T, faqDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faqs
     * const faq = await prisma.faq.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends faqUpdateManyArgs>(
      args: SelectSubset<T, faqUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Faq.
     * @param {faqUpsertArgs} args - Arguments to update or create a Faq.
     * @example
     * // Update or create a Faq
     * const faq = await prisma.faq.upsert({
     *   create: {
     *     // ... data to create a Faq
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faq we want to update
     *   }
     * })
    **/
    upsert<T extends faqUpsertArgs>(
      args: SelectSubset<T, faqUpsertArgs>
    ): CheckSelect<T, Prisma__faqClient<faq>, Prisma__faqClient<faqGetPayload<T>>>

    /**
     * Count the number of Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqCountArgs} args - Arguments to filter Faqs to count.
     * @example
     * // Count the number of Faqs
     * const count = await prisma.faq.count({
     *   where: {
     *     // ... the filter for the Faqs we want to count
     *   }
     * })
    **/
    count<T extends faqCountArgs>(
      args?: Subset<T, faqCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaqCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaqAggregateArgs>(args: Subset<T, FaqAggregateArgs>): PrismaPromise<GetFaqAggregateType<T>>

    /**
     * Group by Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaqGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaqGroupByArgs['orderBy'] }
        : { orderBy?: FaqGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaqGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaqGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for faq.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__faqClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user_account<T extends user_accountArgs = {}>(args?: Subset<T, user_accountArgs>): CheckSelect<T, Prisma__user_accountClient<user_account | null >, Prisma__user_accountClient<user_accountGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * faq findUnique
   */
  export type faqFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the faq
     * 
    **/
    select?: faqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: faqInclude | null
    /**
     * Throw an Error if a faq can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which faq to fetch.
     * 
    **/
    where: faqWhereUniqueInput
  }


  /**
   * faq findFirst
   */
  export type faqFindFirstArgs = {
    /**
     * Select specific fields to fetch from the faq
     * 
    **/
    select?: faqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: faqInclude | null
    /**
     * Throw an Error if a faq can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which faq to fetch.
     * 
    **/
    where?: faqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs to fetch.
     * 
    **/
    orderBy?: Enumerable<faqOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for faqs.
     * 
    **/
    cursor?: faqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of faqs.
     * 
    **/
    distinct?: Enumerable<FaqScalarFieldEnum>
  }


  /**
   * faq findMany
   */
  export type faqFindManyArgs = {
    /**
     * Select specific fields to fetch from the faq
     * 
    **/
    select?: faqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: faqInclude | null
    /**
     * Filter, which faqs to fetch.
     * 
    **/
    where?: faqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs to fetch.
     * 
    **/
    orderBy?: Enumerable<faqOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing faqs.
     * 
    **/
    cursor?: faqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FaqScalarFieldEnum>
  }


  /**
   * faq create
   */
  export type faqCreateArgs = {
    /**
     * Select specific fields to fetch from the faq
     * 
    **/
    select?: faqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: faqInclude | null
    /**
     * The data needed to create a faq.
     * 
    **/
    data: XOR<faqCreateInput, faqUncheckedCreateInput>
  }


  /**
   * faq createMany
   */
  export type faqCreateManyArgs = {
    /**
     * The data used to create many faqs.
     * 
    **/
    data: Enumerable<faqCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * faq update
   */
  export type faqUpdateArgs = {
    /**
     * Select specific fields to fetch from the faq
     * 
    **/
    select?: faqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: faqInclude | null
    /**
     * The data needed to update a faq.
     * 
    **/
    data: XOR<faqUpdateInput, faqUncheckedUpdateInput>
    /**
     * Choose, which faq to update.
     * 
    **/
    where: faqWhereUniqueInput
  }


  /**
   * faq updateMany
   */
  export type faqUpdateManyArgs = {
    /**
     * The data used to update faqs.
     * 
    **/
    data: XOR<faqUpdateManyMutationInput, faqUncheckedUpdateManyInput>
    /**
     * Filter which faqs to update
     * 
    **/
    where?: faqWhereInput
  }


  /**
   * faq upsert
   */
  export type faqUpsertArgs = {
    /**
     * Select specific fields to fetch from the faq
     * 
    **/
    select?: faqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: faqInclude | null
    /**
     * The filter to search for the faq to update in case it exists.
     * 
    **/
    where: faqWhereUniqueInput
    /**
     * In case the faq found by the `where` argument doesn't exist, create a new faq with this data.
     * 
    **/
    create: XOR<faqCreateInput, faqUncheckedCreateInput>
    /**
     * In case the faq was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<faqUpdateInput, faqUncheckedUpdateInput>
  }


  /**
   * faq delete
   */
  export type faqDeleteArgs = {
    /**
     * Select specific fields to fetch from the faq
     * 
    **/
    select?: faqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: faqInclude | null
    /**
     * Filter which faq to delete.
     * 
    **/
    where: faqWhereUniqueInput
  }


  /**
   * faq deleteMany
   */
  export type faqDeleteManyArgs = {
    /**
     * Filter which faqs to delete
     * 
    **/
    where?: faqWhereInput
  }


  /**
   * faq without action
   */
  export type faqArgs = {
    /**
     * Select specific fields to fetch from the faq
     * 
    **/
    select?: faqSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: faqInclude | null
  }



  /**
   * Model remarks
   */


  export type AggregateRemarks = {
    _count: RemarksCountAggregateOutputType | null
    _avg: RemarksAvgAggregateOutputType | null
    _sum: RemarksSumAggregateOutputType | null
    _min: RemarksMinAggregateOutputType | null
    _max: RemarksMaxAggregateOutputType | null
  }

  export type RemarksAvgAggregateOutputType = {
    remarks_id: number | null
    account_id: number | null
    placement_id: number | null
  }

  export type RemarksSumAggregateOutputType = {
    remarks_id: number | null
    account_id: number | null
    placement_id: number | null
  }

  export type RemarksMinAggregateOutputType = {
    remarks_id: number | null
    account_id: number | null
    placement_id: number | null
    remark: string | null
    answers: string | null
    cat: string | null
    sent_on: Date | null
    sent_to: string | null
  }

  export type RemarksMaxAggregateOutputType = {
    remarks_id: number | null
    account_id: number | null
    placement_id: number | null
    remark: string | null
    answers: string | null
    cat: string | null
    sent_on: Date | null
    sent_to: string | null
  }

  export type RemarksCountAggregateOutputType = {
    remarks_id: number
    account_id: number
    placement_id: number
    remark: number
    answers: number
    cat: number
    sent_on: number
    sent_to: number
    _all: number
  }


  export type RemarksAvgAggregateInputType = {
    remarks_id?: true
    account_id?: true
    placement_id?: true
  }

  export type RemarksSumAggregateInputType = {
    remarks_id?: true
    account_id?: true
    placement_id?: true
  }

  export type RemarksMinAggregateInputType = {
    remarks_id?: true
    account_id?: true
    placement_id?: true
    remark?: true
    answers?: true
    cat?: true
    sent_on?: true
    sent_to?: true
  }

  export type RemarksMaxAggregateInputType = {
    remarks_id?: true
    account_id?: true
    placement_id?: true
    remark?: true
    answers?: true
    cat?: true
    sent_on?: true
    sent_to?: true
  }

  export type RemarksCountAggregateInputType = {
    remarks_id?: true
    account_id?: true
    placement_id?: true
    remark?: true
    answers?: true
    cat?: true
    sent_on?: true
    sent_to?: true
    _all?: true
  }

  export type RemarksAggregateArgs = {
    /**
     * Filter which remarks to aggregate.
     * 
    **/
    where?: remarksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of remarks to fetch.
     * 
    **/
    orderBy?: Enumerable<remarksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: remarksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` remarks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` remarks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned remarks
    **/
    _count?: true | RemarksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RemarksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RemarksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RemarksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RemarksMaxAggregateInputType
  }

  export type GetRemarksAggregateType<T extends RemarksAggregateArgs> = {
        [P in keyof T & keyof AggregateRemarks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRemarks[P]>
      : GetScalarType<T[P], AggregateRemarks[P]>
  }




  export type RemarksGroupByArgs = {
    where?: remarksWhereInput
    orderBy?: Enumerable<remarksOrderByWithAggregationInput>
    by: Array<RemarksScalarFieldEnum>
    having?: remarksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RemarksCountAggregateInputType | true
    _avg?: RemarksAvgAggregateInputType
    _sum?: RemarksSumAggregateInputType
    _min?: RemarksMinAggregateInputType
    _max?: RemarksMaxAggregateInputType
  }


  export type RemarksGroupByOutputType = {
    remarks_id: number
    account_id: number
    placement_id: number
    remark: string | null
    answers: string | null
    cat: string | null
    sent_on: Date
    sent_to: string
    _count: RemarksCountAggregateOutputType | null
    _avg: RemarksAvgAggregateOutputType | null
    _sum: RemarksSumAggregateOutputType | null
    _min: RemarksMinAggregateOutputType | null
    _max: RemarksMaxAggregateOutputType | null
  }

  type GetRemarksGroupByPayload<T extends RemarksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RemarksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RemarksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RemarksGroupByOutputType[P]>
            : GetScalarType<T[P], RemarksGroupByOutputType[P]>
        }
      >
    >


  export type remarksSelect = {
    remarks_id?: boolean
    account_id?: boolean
    placement_id?: boolean
    remark?: boolean
    answers?: boolean
    cat?: boolean
    sent_on?: boolean
    sent_to?: boolean
    user_account?: boolean | user_accountArgs
    placement?: boolean | placementArgs
  }

  export type remarksInclude = {
    user_account?: boolean | user_accountArgs
    placement?: boolean | placementArgs
  }

  export type remarksGetPayload<
    S extends boolean | null | undefined | remarksArgs,
    U = keyof S
      > = S extends true
        ? remarks
    : S extends undefined
    ? never
    : S extends remarksArgs | remarksFindManyArgs
    ?'include' extends U
    ? remarks  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user_account' ? user_accountGetPayload<S['include'][P]> :
        P extends 'placement' ? placementGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user_account' ? user_accountGetPayload<S['select'][P]> :
        P extends 'placement' ? placementGetPayload<S['select'][P]> :  P extends keyof remarks ? remarks[P] : never
  } 
    : remarks
  : remarks


  type remarksCountArgs = Merge<
    Omit<remarksFindManyArgs, 'select' | 'include'> & {
      select?: RemarksCountAggregateInputType | true
    }
  >

  export interface remarksDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Remarks that matches the filter.
     * @param {remarksFindUniqueArgs} args - Arguments to find a Remarks
     * @example
     * // Get one Remarks
     * const remarks = await prisma.remarks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends remarksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, remarksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'remarks'> extends True ? CheckSelect<T, Prisma__remarksClient<remarks>, Prisma__remarksClient<remarksGetPayload<T>>> : CheckSelect<T, Prisma__remarksClient<remarks | null >, Prisma__remarksClient<remarksGetPayload<T> | null >>

    /**
     * Find the first Remarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remarksFindFirstArgs} args - Arguments to find a Remarks
     * @example
     * // Get one Remarks
     * const remarks = await prisma.remarks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends remarksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, remarksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'remarks'> extends True ? CheckSelect<T, Prisma__remarksClient<remarks>, Prisma__remarksClient<remarksGetPayload<T>>> : CheckSelect<T, Prisma__remarksClient<remarks | null >, Prisma__remarksClient<remarksGetPayload<T> | null >>

    /**
     * Find zero or more Remarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remarksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Remarks
     * const remarks = await prisma.remarks.findMany()
     * 
     * // Get first 10 Remarks
     * const remarks = await prisma.remarks.findMany({ take: 10 })
     * 
     * // Only select the `remarks_id`
     * const remarksWithRemarks_idOnly = await prisma.remarks.findMany({ select: { remarks_id: true } })
     * 
    **/
    findMany<T extends remarksFindManyArgs>(
      args?: SelectSubset<T, remarksFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<remarks>>, PrismaPromise<Array<remarksGetPayload<T>>>>

    /**
     * Create a Remarks.
     * @param {remarksCreateArgs} args - Arguments to create a Remarks.
     * @example
     * // Create one Remarks
     * const Remarks = await prisma.remarks.create({
     *   data: {
     *     // ... data to create a Remarks
     *   }
     * })
     * 
    **/
    create<T extends remarksCreateArgs>(
      args: SelectSubset<T, remarksCreateArgs>
    ): CheckSelect<T, Prisma__remarksClient<remarks>, Prisma__remarksClient<remarksGetPayload<T>>>

    /**
     * Create many Remarks.
     *     @param {remarksCreateManyArgs} args - Arguments to create many Remarks.
     *     @example
     *     // Create many Remarks
     *     const remarks = await prisma.remarks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends remarksCreateManyArgs>(
      args?: SelectSubset<T, remarksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Remarks.
     * @param {remarksDeleteArgs} args - Arguments to delete one Remarks.
     * @example
     * // Delete one Remarks
     * const Remarks = await prisma.remarks.delete({
     *   where: {
     *     // ... filter to delete one Remarks
     *   }
     * })
     * 
    **/
    delete<T extends remarksDeleteArgs>(
      args: SelectSubset<T, remarksDeleteArgs>
    ): CheckSelect<T, Prisma__remarksClient<remarks>, Prisma__remarksClient<remarksGetPayload<T>>>

    /**
     * Update one Remarks.
     * @param {remarksUpdateArgs} args - Arguments to update one Remarks.
     * @example
     * // Update one Remarks
     * const remarks = await prisma.remarks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends remarksUpdateArgs>(
      args: SelectSubset<T, remarksUpdateArgs>
    ): CheckSelect<T, Prisma__remarksClient<remarks>, Prisma__remarksClient<remarksGetPayload<T>>>

    /**
     * Delete zero or more Remarks.
     * @param {remarksDeleteManyArgs} args - Arguments to filter Remarks to delete.
     * @example
     * // Delete a few Remarks
     * const { count } = await prisma.remarks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends remarksDeleteManyArgs>(
      args?: SelectSubset<T, remarksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Remarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remarksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Remarks
     * const remarks = await prisma.remarks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends remarksUpdateManyArgs>(
      args: SelectSubset<T, remarksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Remarks.
     * @param {remarksUpsertArgs} args - Arguments to update or create a Remarks.
     * @example
     * // Update or create a Remarks
     * const remarks = await prisma.remarks.upsert({
     *   create: {
     *     // ... data to create a Remarks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Remarks we want to update
     *   }
     * })
    **/
    upsert<T extends remarksUpsertArgs>(
      args: SelectSubset<T, remarksUpsertArgs>
    ): CheckSelect<T, Prisma__remarksClient<remarks>, Prisma__remarksClient<remarksGetPayload<T>>>

    /**
     * Count the number of Remarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remarksCountArgs} args - Arguments to filter Remarks to count.
     * @example
     * // Count the number of Remarks
     * const count = await prisma.remarks.count({
     *   where: {
     *     // ... the filter for the Remarks we want to count
     *   }
     * })
    **/
    count<T extends remarksCountArgs>(
      args?: Subset<T, remarksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RemarksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Remarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RemarksAggregateArgs>(args: Subset<T, RemarksAggregateArgs>): PrismaPromise<GetRemarksAggregateType<T>>

    /**
     * Group by Remarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RemarksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RemarksGroupByArgs['orderBy'] }
        : { orderBy?: RemarksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RemarksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRemarksGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for remarks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__remarksClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user_account<T extends user_accountArgs = {}>(args?: Subset<T, user_accountArgs>): CheckSelect<T, Prisma__user_accountClient<user_account | null >, Prisma__user_accountClient<user_accountGetPayload<T> | null >>;

    placement<T extends placementArgs = {}>(args?: Subset<T, placementArgs>): CheckSelect<T, Prisma__placementClient<placement | null >, Prisma__placementClient<placementGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * remarks findUnique
   */
  export type remarksFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the remarks
     * 
    **/
    select?: remarksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: remarksInclude | null
    /**
     * Throw an Error if a remarks can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which remarks to fetch.
     * 
    **/
    where: remarksWhereUniqueInput
  }


  /**
   * remarks findFirst
   */
  export type remarksFindFirstArgs = {
    /**
     * Select specific fields to fetch from the remarks
     * 
    **/
    select?: remarksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: remarksInclude | null
    /**
     * Throw an Error if a remarks can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which remarks to fetch.
     * 
    **/
    where?: remarksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of remarks to fetch.
     * 
    **/
    orderBy?: Enumerable<remarksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for remarks.
     * 
    **/
    cursor?: remarksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` remarks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` remarks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of remarks.
     * 
    **/
    distinct?: Enumerable<RemarksScalarFieldEnum>
  }


  /**
   * remarks findMany
   */
  export type remarksFindManyArgs = {
    /**
     * Select specific fields to fetch from the remarks
     * 
    **/
    select?: remarksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: remarksInclude | null
    /**
     * Filter, which remarks to fetch.
     * 
    **/
    where?: remarksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of remarks to fetch.
     * 
    **/
    orderBy?: Enumerable<remarksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing remarks.
     * 
    **/
    cursor?: remarksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` remarks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` remarks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RemarksScalarFieldEnum>
  }


  /**
   * remarks create
   */
  export type remarksCreateArgs = {
    /**
     * Select specific fields to fetch from the remarks
     * 
    **/
    select?: remarksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: remarksInclude | null
    /**
     * The data needed to create a remarks.
     * 
    **/
    data: XOR<remarksCreateInput, remarksUncheckedCreateInput>
  }


  /**
   * remarks createMany
   */
  export type remarksCreateManyArgs = {
    /**
     * The data used to create many remarks.
     * 
    **/
    data: Enumerable<remarksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * remarks update
   */
  export type remarksUpdateArgs = {
    /**
     * Select specific fields to fetch from the remarks
     * 
    **/
    select?: remarksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: remarksInclude | null
    /**
     * The data needed to update a remarks.
     * 
    **/
    data: XOR<remarksUpdateInput, remarksUncheckedUpdateInput>
    /**
     * Choose, which remarks to update.
     * 
    **/
    where: remarksWhereUniqueInput
  }


  /**
   * remarks updateMany
   */
  export type remarksUpdateManyArgs = {
    /**
     * The data used to update remarks.
     * 
    **/
    data: XOR<remarksUpdateManyMutationInput, remarksUncheckedUpdateManyInput>
    /**
     * Filter which remarks to update
     * 
    **/
    where?: remarksWhereInput
  }


  /**
   * remarks upsert
   */
  export type remarksUpsertArgs = {
    /**
     * Select specific fields to fetch from the remarks
     * 
    **/
    select?: remarksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: remarksInclude | null
    /**
     * The filter to search for the remarks to update in case it exists.
     * 
    **/
    where: remarksWhereUniqueInput
    /**
     * In case the remarks found by the `where` argument doesn't exist, create a new remarks with this data.
     * 
    **/
    create: XOR<remarksCreateInput, remarksUncheckedCreateInput>
    /**
     * In case the remarks was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<remarksUpdateInput, remarksUncheckedUpdateInput>
  }


  /**
   * remarks delete
   */
  export type remarksDeleteArgs = {
    /**
     * Select specific fields to fetch from the remarks
     * 
    **/
    select?: remarksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: remarksInclude | null
    /**
     * Filter which remarks to delete.
     * 
    **/
    where: remarksWhereUniqueInput
  }


  /**
   * remarks deleteMany
   */
  export type remarksDeleteManyArgs = {
    /**
     * Filter which remarks to delete
     * 
    **/
    where?: remarksWhereInput
  }


  /**
   * remarks without action
   */
  export type remarksArgs = {
    /**
     * Select specific fields to fetch from the remarks
     * 
    **/
    select?: remarksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: remarksInclude | null
  }



  /**
   * Model test_acad_year
   */


  export type AggregateTest_acad_year = {
    _count: Test_acad_yearCountAggregateOutputType | null
    _avg: Test_acad_yearAvgAggregateOutputType | null
    _sum: Test_acad_yearSumAggregateOutputType | null
    _min: Test_acad_yearMinAggregateOutputType | null
    _max: Test_acad_yearMaxAggregateOutputType | null
  }

  export type Test_acad_yearAvgAggregateOutputType = {
    acad_test_id: number | null
    acad_test_year: number | null
  }

  export type Test_acad_yearSumAggregateOutputType = {
    acad_test_id: number | null
    acad_test_year: number | null
  }

  export type Test_acad_yearMinAggregateOutputType = {
    acad_test_id: number | null
    acad_test_year: number | null
  }

  export type Test_acad_yearMaxAggregateOutputType = {
    acad_test_id: number | null
    acad_test_year: number | null
  }

  export type Test_acad_yearCountAggregateOutputType = {
    acad_test_id: number
    acad_test_year: number
    _all: number
  }


  export type Test_acad_yearAvgAggregateInputType = {
    acad_test_id?: true
    acad_test_year?: true
  }

  export type Test_acad_yearSumAggregateInputType = {
    acad_test_id?: true
    acad_test_year?: true
  }

  export type Test_acad_yearMinAggregateInputType = {
    acad_test_id?: true
    acad_test_year?: true
  }

  export type Test_acad_yearMaxAggregateInputType = {
    acad_test_id?: true
    acad_test_year?: true
  }

  export type Test_acad_yearCountAggregateInputType = {
    acad_test_id?: true
    acad_test_year?: true
    _all?: true
  }

  export type Test_acad_yearAggregateArgs = {
    /**
     * Filter which test_acad_year to aggregate.
     * 
    **/
    where?: test_acad_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of test_acad_years to fetch.
     * 
    **/
    orderBy?: Enumerable<test_acad_yearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: test_acad_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` test_acad_years from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` test_acad_years.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned test_acad_years
    **/
    _count?: true | Test_acad_yearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Test_acad_yearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Test_acad_yearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Test_acad_yearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Test_acad_yearMaxAggregateInputType
  }

  export type GetTest_acad_yearAggregateType<T extends Test_acad_yearAggregateArgs> = {
        [P in keyof T & keyof AggregateTest_acad_year]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTest_acad_year[P]>
      : GetScalarType<T[P], AggregateTest_acad_year[P]>
  }




  export type Test_acad_yearGroupByArgs = {
    where?: test_acad_yearWhereInput
    orderBy?: Enumerable<test_acad_yearOrderByWithAggregationInput>
    by: Array<Test_acad_yearScalarFieldEnum>
    having?: test_acad_yearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Test_acad_yearCountAggregateInputType | true
    _avg?: Test_acad_yearAvgAggregateInputType
    _sum?: Test_acad_yearSumAggregateInputType
    _min?: Test_acad_yearMinAggregateInputType
    _max?: Test_acad_yearMaxAggregateInputType
  }


  export type Test_acad_yearGroupByOutputType = {
    acad_test_id: number
    acad_test_year: number | null
    _count: Test_acad_yearCountAggregateOutputType | null
    _avg: Test_acad_yearAvgAggregateOutputType | null
    _sum: Test_acad_yearSumAggregateOutputType | null
    _min: Test_acad_yearMinAggregateOutputType | null
    _max: Test_acad_yearMaxAggregateOutputType | null
  }

  type GetTest_acad_yearGroupByPayload<T extends Test_acad_yearGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Test_acad_yearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Test_acad_yearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Test_acad_yearGroupByOutputType[P]>
            : GetScalarType<T[P], Test_acad_yearGroupByOutputType[P]>
        }
      >
    >


  export type test_acad_yearSelect = {
    acad_test_id?: boolean
    acad_test_year?: boolean
  }

  export type test_acad_yearGetPayload<
    S extends boolean | null | undefined | test_acad_yearArgs,
    U = keyof S
      > = S extends true
        ? test_acad_year
    : S extends undefined
    ? never
    : S extends test_acad_yearArgs | test_acad_yearFindManyArgs
    ?'include' extends U
    ? test_acad_year 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof test_acad_year ? test_acad_year[P] : never
  } 
    : test_acad_year
  : test_acad_year


  type test_acad_yearCountArgs = Merge<
    Omit<test_acad_yearFindManyArgs, 'select' | 'include'> & {
      select?: Test_acad_yearCountAggregateInputType | true
    }
  >

  export interface test_acad_yearDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Test_acad_year that matches the filter.
     * @param {test_acad_yearFindUniqueArgs} args - Arguments to find a Test_acad_year
     * @example
     * // Get one Test_acad_year
     * const test_acad_year = await prisma.test_acad_year.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends test_acad_yearFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, test_acad_yearFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'test_acad_year'> extends True ? CheckSelect<T, Prisma__test_acad_yearClient<test_acad_year>, Prisma__test_acad_yearClient<test_acad_yearGetPayload<T>>> : CheckSelect<T, Prisma__test_acad_yearClient<test_acad_year | null >, Prisma__test_acad_yearClient<test_acad_yearGetPayload<T> | null >>

    /**
     * Find the first Test_acad_year that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {test_acad_yearFindFirstArgs} args - Arguments to find a Test_acad_year
     * @example
     * // Get one Test_acad_year
     * const test_acad_year = await prisma.test_acad_year.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends test_acad_yearFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, test_acad_yearFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'test_acad_year'> extends True ? CheckSelect<T, Prisma__test_acad_yearClient<test_acad_year>, Prisma__test_acad_yearClient<test_acad_yearGetPayload<T>>> : CheckSelect<T, Prisma__test_acad_yearClient<test_acad_year | null >, Prisma__test_acad_yearClient<test_acad_yearGetPayload<T> | null >>

    /**
     * Find zero or more Test_acad_years that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {test_acad_yearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Test_acad_years
     * const test_acad_years = await prisma.test_acad_year.findMany()
     * 
     * // Get first 10 Test_acad_years
     * const test_acad_years = await prisma.test_acad_year.findMany({ take: 10 })
     * 
     * // Only select the `acad_test_id`
     * const test_acad_yearWithAcad_test_idOnly = await prisma.test_acad_year.findMany({ select: { acad_test_id: true } })
     * 
    **/
    findMany<T extends test_acad_yearFindManyArgs>(
      args?: SelectSubset<T, test_acad_yearFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<test_acad_year>>, PrismaPromise<Array<test_acad_yearGetPayload<T>>>>

    /**
     * Create a Test_acad_year.
     * @param {test_acad_yearCreateArgs} args - Arguments to create a Test_acad_year.
     * @example
     * // Create one Test_acad_year
     * const Test_acad_year = await prisma.test_acad_year.create({
     *   data: {
     *     // ... data to create a Test_acad_year
     *   }
     * })
     * 
    **/
    create<T extends test_acad_yearCreateArgs>(
      args: SelectSubset<T, test_acad_yearCreateArgs>
    ): CheckSelect<T, Prisma__test_acad_yearClient<test_acad_year>, Prisma__test_acad_yearClient<test_acad_yearGetPayload<T>>>

    /**
     * Create many Test_acad_years.
     *     @param {test_acad_yearCreateManyArgs} args - Arguments to create many Test_acad_years.
     *     @example
     *     // Create many Test_acad_years
     *     const test_acad_year = await prisma.test_acad_year.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends test_acad_yearCreateManyArgs>(
      args?: SelectSubset<T, test_acad_yearCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Test_acad_year.
     * @param {test_acad_yearDeleteArgs} args - Arguments to delete one Test_acad_year.
     * @example
     * // Delete one Test_acad_year
     * const Test_acad_year = await prisma.test_acad_year.delete({
     *   where: {
     *     // ... filter to delete one Test_acad_year
     *   }
     * })
     * 
    **/
    delete<T extends test_acad_yearDeleteArgs>(
      args: SelectSubset<T, test_acad_yearDeleteArgs>
    ): CheckSelect<T, Prisma__test_acad_yearClient<test_acad_year>, Prisma__test_acad_yearClient<test_acad_yearGetPayload<T>>>

    /**
     * Update one Test_acad_year.
     * @param {test_acad_yearUpdateArgs} args - Arguments to update one Test_acad_year.
     * @example
     * // Update one Test_acad_year
     * const test_acad_year = await prisma.test_acad_year.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends test_acad_yearUpdateArgs>(
      args: SelectSubset<T, test_acad_yearUpdateArgs>
    ): CheckSelect<T, Prisma__test_acad_yearClient<test_acad_year>, Prisma__test_acad_yearClient<test_acad_yearGetPayload<T>>>

    /**
     * Delete zero or more Test_acad_years.
     * @param {test_acad_yearDeleteManyArgs} args - Arguments to filter Test_acad_years to delete.
     * @example
     * // Delete a few Test_acad_years
     * const { count } = await prisma.test_acad_year.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends test_acad_yearDeleteManyArgs>(
      args?: SelectSubset<T, test_acad_yearDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Test_acad_years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {test_acad_yearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Test_acad_years
     * const test_acad_year = await prisma.test_acad_year.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends test_acad_yearUpdateManyArgs>(
      args: SelectSubset<T, test_acad_yearUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Test_acad_year.
     * @param {test_acad_yearUpsertArgs} args - Arguments to update or create a Test_acad_year.
     * @example
     * // Update or create a Test_acad_year
     * const test_acad_year = await prisma.test_acad_year.upsert({
     *   create: {
     *     // ... data to create a Test_acad_year
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test_acad_year we want to update
     *   }
     * })
    **/
    upsert<T extends test_acad_yearUpsertArgs>(
      args: SelectSubset<T, test_acad_yearUpsertArgs>
    ): CheckSelect<T, Prisma__test_acad_yearClient<test_acad_year>, Prisma__test_acad_yearClient<test_acad_yearGetPayload<T>>>

    /**
     * Count the number of Test_acad_years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {test_acad_yearCountArgs} args - Arguments to filter Test_acad_years to count.
     * @example
     * // Count the number of Test_acad_years
     * const count = await prisma.test_acad_year.count({
     *   where: {
     *     // ... the filter for the Test_acad_years we want to count
     *   }
     * })
    **/
    count<T extends test_acad_yearCountArgs>(
      args?: Subset<T, test_acad_yearCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Test_acad_yearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Test_acad_year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Test_acad_yearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Test_acad_yearAggregateArgs>(args: Subset<T, Test_acad_yearAggregateArgs>): PrismaPromise<GetTest_acad_yearAggregateType<T>>

    /**
     * Group by Test_acad_year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Test_acad_yearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Test_acad_yearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Test_acad_yearGroupByArgs['orderBy'] }
        : { orderBy?: Test_acad_yearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Test_acad_yearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTest_acad_yearGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for test_acad_year.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__test_acad_yearClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * test_acad_year findUnique
   */
  export type test_acad_yearFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the test_acad_year
     * 
    **/
    select?: test_acad_yearSelect | null
    /**
     * Throw an Error if a test_acad_year can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which test_acad_year to fetch.
     * 
    **/
    where: test_acad_yearWhereUniqueInput
  }


  /**
   * test_acad_year findFirst
   */
  export type test_acad_yearFindFirstArgs = {
    /**
     * Select specific fields to fetch from the test_acad_year
     * 
    **/
    select?: test_acad_yearSelect | null
    /**
     * Throw an Error if a test_acad_year can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which test_acad_year to fetch.
     * 
    **/
    where?: test_acad_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of test_acad_years to fetch.
     * 
    **/
    orderBy?: Enumerable<test_acad_yearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for test_acad_years.
     * 
    **/
    cursor?: test_acad_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` test_acad_years from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` test_acad_years.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of test_acad_years.
     * 
    **/
    distinct?: Enumerable<Test_acad_yearScalarFieldEnum>
  }


  /**
   * test_acad_year findMany
   */
  export type test_acad_yearFindManyArgs = {
    /**
     * Select specific fields to fetch from the test_acad_year
     * 
    **/
    select?: test_acad_yearSelect | null
    /**
     * Filter, which test_acad_years to fetch.
     * 
    **/
    where?: test_acad_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of test_acad_years to fetch.
     * 
    **/
    orderBy?: Enumerable<test_acad_yearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing test_acad_years.
     * 
    **/
    cursor?: test_acad_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` test_acad_years from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` test_acad_years.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Test_acad_yearScalarFieldEnum>
  }


  /**
   * test_acad_year create
   */
  export type test_acad_yearCreateArgs = {
    /**
     * Select specific fields to fetch from the test_acad_year
     * 
    **/
    select?: test_acad_yearSelect | null
    /**
     * The data needed to create a test_acad_year.
     * 
    **/
    data: XOR<test_acad_yearCreateInput, test_acad_yearUncheckedCreateInput>
  }


  /**
   * test_acad_year createMany
   */
  export type test_acad_yearCreateManyArgs = {
    /**
     * The data used to create many test_acad_years.
     * 
    **/
    data: Enumerable<test_acad_yearCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * test_acad_year update
   */
  export type test_acad_yearUpdateArgs = {
    /**
     * Select specific fields to fetch from the test_acad_year
     * 
    **/
    select?: test_acad_yearSelect | null
    /**
     * The data needed to update a test_acad_year.
     * 
    **/
    data: XOR<test_acad_yearUpdateInput, test_acad_yearUncheckedUpdateInput>
    /**
     * Choose, which test_acad_year to update.
     * 
    **/
    where: test_acad_yearWhereUniqueInput
  }


  /**
   * test_acad_year updateMany
   */
  export type test_acad_yearUpdateManyArgs = {
    /**
     * The data used to update test_acad_years.
     * 
    **/
    data: XOR<test_acad_yearUpdateManyMutationInput, test_acad_yearUncheckedUpdateManyInput>
    /**
     * Filter which test_acad_years to update
     * 
    **/
    where?: test_acad_yearWhereInput
  }


  /**
   * test_acad_year upsert
   */
  export type test_acad_yearUpsertArgs = {
    /**
     * Select specific fields to fetch from the test_acad_year
     * 
    **/
    select?: test_acad_yearSelect | null
    /**
     * The filter to search for the test_acad_year to update in case it exists.
     * 
    **/
    where: test_acad_yearWhereUniqueInput
    /**
     * In case the test_acad_year found by the `where` argument doesn't exist, create a new test_acad_year with this data.
     * 
    **/
    create: XOR<test_acad_yearCreateInput, test_acad_yearUncheckedCreateInput>
    /**
     * In case the test_acad_year was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<test_acad_yearUpdateInput, test_acad_yearUncheckedUpdateInput>
  }


  /**
   * test_acad_year delete
   */
  export type test_acad_yearDeleteArgs = {
    /**
     * Select specific fields to fetch from the test_acad_year
     * 
    **/
    select?: test_acad_yearSelect | null
    /**
     * Filter which test_acad_year to delete.
     * 
    **/
    where: test_acad_yearWhereUniqueInput
  }


  /**
   * test_acad_year deleteMany
   */
  export type test_acad_yearDeleteManyArgs = {
    /**
     * Filter which test_acad_years to delete
     * 
    **/
    where?: test_acad_yearWhereInput
  }


  /**
   * test_acad_year without action
   */
  export type test_acad_yearArgs = {
    /**
     * Select specific fields to fetch from the test_acad_year
     * 
    **/
    select?: test_acad_yearSelect | null
  }



  /**
   * Model test_placement_year
   */


  export type AggregateTest_placement_year = {
    _count: Test_placement_yearCountAggregateOutputType | null
    _avg: Test_placement_yearAvgAggregateOutputType | null
    _sum: Test_placement_yearSumAggregateOutputType | null
    _min: Test_placement_yearMinAggregateOutputType | null
    _max: Test_placement_yearMaxAggregateOutputType | null
  }

  export type Test_placement_yearAvgAggregateOutputType = {
    placement_test_id: number | null
    placement_test_year: number | null
  }

  export type Test_placement_yearSumAggregateOutputType = {
    placement_test_id: number | null
    placement_test_year: number | null
  }

  export type Test_placement_yearMinAggregateOutputType = {
    placement_test_id: number | null
    placement_test_year: number | null
  }

  export type Test_placement_yearMaxAggregateOutputType = {
    placement_test_id: number | null
    placement_test_year: number | null
  }

  export type Test_placement_yearCountAggregateOutputType = {
    placement_test_id: number
    placement_test_year: number
    _all: number
  }


  export type Test_placement_yearAvgAggregateInputType = {
    placement_test_id?: true
    placement_test_year?: true
  }

  export type Test_placement_yearSumAggregateInputType = {
    placement_test_id?: true
    placement_test_year?: true
  }

  export type Test_placement_yearMinAggregateInputType = {
    placement_test_id?: true
    placement_test_year?: true
  }

  export type Test_placement_yearMaxAggregateInputType = {
    placement_test_id?: true
    placement_test_year?: true
  }

  export type Test_placement_yearCountAggregateInputType = {
    placement_test_id?: true
    placement_test_year?: true
    _all?: true
  }

  export type Test_placement_yearAggregateArgs = {
    /**
     * Filter which test_placement_year to aggregate.
     * 
    **/
    where?: test_placement_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of test_placement_years to fetch.
     * 
    **/
    orderBy?: Enumerable<test_placement_yearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: test_placement_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` test_placement_years from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` test_placement_years.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned test_placement_years
    **/
    _count?: true | Test_placement_yearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Test_placement_yearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Test_placement_yearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Test_placement_yearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Test_placement_yearMaxAggregateInputType
  }

  export type GetTest_placement_yearAggregateType<T extends Test_placement_yearAggregateArgs> = {
        [P in keyof T & keyof AggregateTest_placement_year]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTest_placement_year[P]>
      : GetScalarType<T[P], AggregateTest_placement_year[P]>
  }




  export type Test_placement_yearGroupByArgs = {
    where?: test_placement_yearWhereInput
    orderBy?: Enumerable<test_placement_yearOrderByWithAggregationInput>
    by: Array<Test_placement_yearScalarFieldEnum>
    having?: test_placement_yearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Test_placement_yearCountAggregateInputType | true
    _avg?: Test_placement_yearAvgAggregateInputType
    _sum?: Test_placement_yearSumAggregateInputType
    _min?: Test_placement_yearMinAggregateInputType
    _max?: Test_placement_yearMaxAggregateInputType
  }


  export type Test_placement_yearGroupByOutputType = {
    placement_test_id: number
    placement_test_year: number | null
    _count: Test_placement_yearCountAggregateOutputType | null
    _avg: Test_placement_yearAvgAggregateOutputType | null
    _sum: Test_placement_yearSumAggregateOutputType | null
    _min: Test_placement_yearMinAggregateOutputType | null
    _max: Test_placement_yearMaxAggregateOutputType | null
  }

  type GetTest_placement_yearGroupByPayload<T extends Test_placement_yearGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Test_placement_yearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Test_placement_yearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Test_placement_yearGroupByOutputType[P]>
            : GetScalarType<T[P], Test_placement_yearGroupByOutputType[P]>
        }
      >
    >


  export type test_placement_yearSelect = {
    placement_test_id?: boolean
    placement_test_year?: boolean
  }

  export type test_placement_yearGetPayload<
    S extends boolean | null | undefined | test_placement_yearArgs,
    U = keyof S
      > = S extends true
        ? test_placement_year
    : S extends undefined
    ? never
    : S extends test_placement_yearArgs | test_placement_yearFindManyArgs
    ?'include' extends U
    ? test_placement_year 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof test_placement_year ? test_placement_year[P] : never
  } 
    : test_placement_year
  : test_placement_year


  type test_placement_yearCountArgs = Merge<
    Omit<test_placement_yearFindManyArgs, 'select' | 'include'> & {
      select?: Test_placement_yearCountAggregateInputType | true
    }
  >

  export interface test_placement_yearDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Test_placement_year that matches the filter.
     * @param {test_placement_yearFindUniqueArgs} args - Arguments to find a Test_placement_year
     * @example
     * // Get one Test_placement_year
     * const test_placement_year = await prisma.test_placement_year.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends test_placement_yearFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, test_placement_yearFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'test_placement_year'> extends True ? CheckSelect<T, Prisma__test_placement_yearClient<test_placement_year>, Prisma__test_placement_yearClient<test_placement_yearGetPayload<T>>> : CheckSelect<T, Prisma__test_placement_yearClient<test_placement_year | null >, Prisma__test_placement_yearClient<test_placement_yearGetPayload<T> | null >>

    /**
     * Find the first Test_placement_year that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {test_placement_yearFindFirstArgs} args - Arguments to find a Test_placement_year
     * @example
     * // Get one Test_placement_year
     * const test_placement_year = await prisma.test_placement_year.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends test_placement_yearFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, test_placement_yearFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'test_placement_year'> extends True ? CheckSelect<T, Prisma__test_placement_yearClient<test_placement_year>, Prisma__test_placement_yearClient<test_placement_yearGetPayload<T>>> : CheckSelect<T, Prisma__test_placement_yearClient<test_placement_year | null >, Prisma__test_placement_yearClient<test_placement_yearGetPayload<T> | null >>

    /**
     * Find zero or more Test_placement_years that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {test_placement_yearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Test_placement_years
     * const test_placement_years = await prisma.test_placement_year.findMany()
     * 
     * // Get first 10 Test_placement_years
     * const test_placement_years = await prisma.test_placement_year.findMany({ take: 10 })
     * 
     * // Only select the `placement_test_id`
     * const test_placement_yearWithPlacement_test_idOnly = await prisma.test_placement_year.findMany({ select: { placement_test_id: true } })
     * 
    **/
    findMany<T extends test_placement_yearFindManyArgs>(
      args?: SelectSubset<T, test_placement_yearFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<test_placement_year>>, PrismaPromise<Array<test_placement_yearGetPayload<T>>>>

    /**
     * Create a Test_placement_year.
     * @param {test_placement_yearCreateArgs} args - Arguments to create a Test_placement_year.
     * @example
     * // Create one Test_placement_year
     * const Test_placement_year = await prisma.test_placement_year.create({
     *   data: {
     *     // ... data to create a Test_placement_year
     *   }
     * })
     * 
    **/
    create<T extends test_placement_yearCreateArgs>(
      args: SelectSubset<T, test_placement_yearCreateArgs>
    ): CheckSelect<T, Prisma__test_placement_yearClient<test_placement_year>, Prisma__test_placement_yearClient<test_placement_yearGetPayload<T>>>

    /**
     * Create many Test_placement_years.
     *     @param {test_placement_yearCreateManyArgs} args - Arguments to create many Test_placement_years.
     *     @example
     *     // Create many Test_placement_years
     *     const test_placement_year = await prisma.test_placement_year.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends test_placement_yearCreateManyArgs>(
      args?: SelectSubset<T, test_placement_yearCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Test_placement_year.
     * @param {test_placement_yearDeleteArgs} args - Arguments to delete one Test_placement_year.
     * @example
     * // Delete one Test_placement_year
     * const Test_placement_year = await prisma.test_placement_year.delete({
     *   where: {
     *     // ... filter to delete one Test_placement_year
     *   }
     * })
     * 
    **/
    delete<T extends test_placement_yearDeleteArgs>(
      args: SelectSubset<T, test_placement_yearDeleteArgs>
    ): CheckSelect<T, Prisma__test_placement_yearClient<test_placement_year>, Prisma__test_placement_yearClient<test_placement_yearGetPayload<T>>>

    /**
     * Update one Test_placement_year.
     * @param {test_placement_yearUpdateArgs} args - Arguments to update one Test_placement_year.
     * @example
     * // Update one Test_placement_year
     * const test_placement_year = await prisma.test_placement_year.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends test_placement_yearUpdateArgs>(
      args: SelectSubset<T, test_placement_yearUpdateArgs>
    ): CheckSelect<T, Prisma__test_placement_yearClient<test_placement_year>, Prisma__test_placement_yearClient<test_placement_yearGetPayload<T>>>

    /**
     * Delete zero or more Test_placement_years.
     * @param {test_placement_yearDeleteManyArgs} args - Arguments to filter Test_placement_years to delete.
     * @example
     * // Delete a few Test_placement_years
     * const { count } = await prisma.test_placement_year.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends test_placement_yearDeleteManyArgs>(
      args?: SelectSubset<T, test_placement_yearDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Test_placement_years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {test_placement_yearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Test_placement_years
     * const test_placement_year = await prisma.test_placement_year.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends test_placement_yearUpdateManyArgs>(
      args: SelectSubset<T, test_placement_yearUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Test_placement_year.
     * @param {test_placement_yearUpsertArgs} args - Arguments to update or create a Test_placement_year.
     * @example
     * // Update or create a Test_placement_year
     * const test_placement_year = await prisma.test_placement_year.upsert({
     *   create: {
     *     // ... data to create a Test_placement_year
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test_placement_year we want to update
     *   }
     * })
    **/
    upsert<T extends test_placement_yearUpsertArgs>(
      args: SelectSubset<T, test_placement_yearUpsertArgs>
    ): CheckSelect<T, Prisma__test_placement_yearClient<test_placement_year>, Prisma__test_placement_yearClient<test_placement_yearGetPayload<T>>>

    /**
     * Count the number of Test_placement_years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {test_placement_yearCountArgs} args - Arguments to filter Test_placement_years to count.
     * @example
     * // Count the number of Test_placement_years
     * const count = await prisma.test_placement_year.count({
     *   where: {
     *     // ... the filter for the Test_placement_years we want to count
     *   }
     * })
    **/
    count<T extends test_placement_yearCountArgs>(
      args?: Subset<T, test_placement_yearCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Test_placement_yearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Test_placement_year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Test_placement_yearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Test_placement_yearAggregateArgs>(args: Subset<T, Test_placement_yearAggregateArgs>): PrismaPromise<GetTest_placement_yearAggregateType<T>>

    /**
     * Group by Test_placement_year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Test_placement_yearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Test_placement_yearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Test_placement_yearGroupByArgs['orderBy'] }
        : { orderBy?: Test_placement_yearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Test_placement_yearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTest_placement_yearGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for test_placement_year.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__test_placement_yearClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * test_placement_year findUnique
   */
  export type test_placement_yearFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the test_placement_year
     * 
    **/
    select?: test_placement_yearSelect | null
    /**
     * Throw an Error if a test_placement_year can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which test_placement_year to fetch.
     * 
    **/
    where: test_placement_yearWhereUniqueInput
  }


  /**
   * test_placement_year findFirst
   */
  export type test_placement_yearFindFirstArgs = {
    /**
     * Select specific fields to fetch from the test_placement_year
     * 
    **/
    select?: test_placement_yearSelect | null
    /**
     * Throw an Error if a test_placement_year can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which test_placement_year to fetch.
     * 
    **/
    where?: test_placement_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of test_placement_years to fetch.
     * 
    **/
    orderBy?: Enumerable<test_placement_yearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for test_placement_years.
     * 
    **/
    cursor?: test_placement_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` test_placement_years from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` test_placement_years.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of test_placement_years.
     * 
    **/
    distinct?: Enumerable<Test_placement_yearScalarFieldEnum>
  }


  /**
   * test_placement_year findMany
   */
  export type test_placement_yearFindManyArgs = {
    /**
     * Select specific fields to fetch from the test_placement_year
     * 
    **/
    select?: test_placement_yearSelect | null
    /**
     * Filter, which test_placement_years to fetch.
     * 
    **/
    where?: test_placement_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of test_placement_years to fetch.
     * 
    **/
    orderBy?: Enumerable<test_placement_yearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing test_placement_years.
     * 
    **/
    cursor?: test_placement_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` test_placement_years from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` test_placement_years.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Test_placement_yearScalarFieldEnum>
  }


  /**
   * test_placement_year create
   */
  export type test_placement_yearCreateArgs = {
    /**
     * Select specific fields to fetch from the test_placement_year
     * 
    **/
    select?: test_placement_yearSelect | null
    /**
     * The data needed to create a test_placement_year.
     * 
    **/
    data: XOR<test_placement_yearCreateInput, test_placement_yearUncheckedCreateInput>
  }


  /**
   * test_placement_year createMany
   */
  export type test_placement_yearCreateManyArgs = {
    /**
     * The data used to create many test_placement_years.
     * 
    **/
    data: Enumerable<test_placement_yearCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * test_placement_year update
   */
  export type test_placement_yearUpdateArgs = {
    /**
     * Select specific fields to fetch from the test_placement_year
     * 
    **/
    select?: test_placement_yearSelect | null
    /**
     * The data needed to update a test_placement_year.
     * 
    **/
    data: XOR<test_placement_yearUpdateInput, test_placement_yearUncheckedUpdateInput>
    /**
     * Choose, which test_placement_year to update.
     * 
    **/
    where: test_placement_yearWhereUniqueInput
  }


  /**
   * test_placement_year updateMany
   */
  export type test_placement_yearUpdateManyArgs = {
    /**
     * The data used to update test_placement_years.
     * 
    **/
    data: XOR<test_placement_yearUpdateManyMutationInput, test_placement_yearUncheckedUpdateManyInput>
    /**
     * Filter which test_placement_years to update
     * 
    **/
    where?: test_placement_yearWhereInput
  }


  /**
   * test_placement_year upsert
   */
  export type test_placement_yearUpsertArgs = {
    /**
     * Select specific fields to fetch from the test_placement_year
     * 
    **/
    select?: test_placement_yearSelect | null
    /**
     * The filter to search for the test_placement_year to update in case it exists.
     * 
    **/
    where: test_placement_yearWhereUniqueInput
    /**
     * In case the test_placement_year found by the `where` argument doesn't exist, create a new test_placement_year with this data.
     * 
    **/
    create: XOR<test_placement_yearCreateInput, test_placement_yearUncheckedCreateInput>
    /**
     * In case the test_placement_year was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<test_placement_yearUpdateInput, test_placement_yearUncheckedUpdateInput>
  }


  /**
   * test_placement_year delete
   */
  export type test_placement_yearDeleteArgs = {
    /**
     * Select specific fields to fetch from the test_placement_year
     * 
    **/
    select?: test_placement_yearSelect | null
    /**
     * Filter which test_placement_year to delete.
     * 
    **/
    where: test_placement_yearWhereUniqueInput
  }


  /**
   * test_placement_year deleteMany
   */
  export type test_placement_yearDeleteManyArgs = {
    /**
     * Filter which test_placement_years to delete
     * 
    **/
    where?: test_placement_yearWhereInput
  }


  /**
   * test_placement_year without action
   */
  export type test_placement_yearArgs = {
    /**
     * Select specific fields to fetch from the test_placement_year
     * 
    **/
    select?: test_placement_yearSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const StudentScalarFieldEnum: {
    student_uid: 'student_uid',
    english_name: 'english_name',
    acad_year: 'acad_year',
    course_year: 'course_year',
    curriculum: 'curriculum',
    placement_status: 'placement_status',
    modified_by: 'modified_by',
    last_modified: 'last_modified'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const User_accountScalarFieldEnum: {
    account_id: 'account_id',
    student_uid: 'student_uid',
    username: 'username',
    password: 'password'
  };

  export type User_accountScalarFieldEnum = (typeof User_accountScalarFieldEnum)[keyof typeof User_accountScalarFieldEnum]


  export const PlacementScalarFieldEnum: {
    placement_id: 'placement_id',
    username: 'username',
    student_uid: 'student_uid',
    placement_year: 'placement_year',
    appointment_letter: 'appointment_letter',
    feedback_form: 'feedback_form',
    feedback_comment: 'feedback_comment',
    company_name: 'company_name',
    job_title: 'job_title',
    job_nature: 'job_nature',
    employment_duration: 'employment_duration',
    start_date: 'start_date',
    end_date: 'end_date',
    working_location: 'working_location',
    salary: 'salary',
    payment_type: 'payment_type',
    supervisor_name: 'supervisor_name',
    supervisor_telephone: 'supervisor_telephone',
    supervisor_email: 'supervisor_email',
    modified_by: 'modified_by',
    last_modified: 'last_modified',
    created_by: 'created_by',
    creation_time: 'creation_time',
    consent_form: 'consent_form'
  };

  export type PlacementScalarFieldEnum = (typeof PlacementScalarFieldEnum)[keyof typeof PlacementScalarFieldEnum]


  export const FaqScalarFieldEnum: {
    faq_id: 'faq_id',
    account_id: 'account_id',
    questions: 'questions',
    answers: 'answers',
    last_modified: 'last_modified',
    cat: 'cat'
  };

  export type FaqScalarFieldEnum = (typeof FaqScalarFieldEnum)[keyof typeof FaqScalarFieldEnum]


  export const RemarksScalarFieldEnum: {
    remarks_id: 'remarks_id',
    account_id: 'account_id',
    placement_id: 'placement_id',
    remark: 'remark',
    answers: 'answers',
    cat: 'cat',
    sent_on: 'sent_on',
    sent_to: 'sent_to'
  };

  export type RemarksScalarFieldEnum = (typeof RemarksScalarFieldEnum)[keyof typeof RemarksScalarFieldEnum]


  export const Test_acad_yearScalarFieldEnum: {
    acad_test_id: 'acad_test_id',
    acad_test_year: 'acad_test_year'
  };

  export type Test_acad_yearScalarFieldEnum = (typeof Test_acad_yearScalarFieldEnum)[keyof typeof Test_acad_yearScalarFieldEnum]


  export const Test_placement_yearScalarFieldEnum: {
    placement_test_id: 'placement_test_id',
    placement_test_year: 'placement_test_year'
  };

  export type Test_placement_yearScalarFieldEnum = (typeof Test_placement_yearScalarFieldEnum)[keyof typeof Test_placement_yearScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type studentWhereInput = {
    AND?: Enumerable<studentWhereInput>
    OR?: Enumerable<studentWhereInput>
    NOT?: Enumerable<studentWhereInput>
    student_uid?: StringFilter | string
    english_name?: StringFilter | string
    acad_year?: StringFilter | string
    course_year?: IntFilter | number
    curriculum?: StringFilter | string
    placement_status?: Enumstudent_placement_statusFilter | student_placement_status
    modified_by?: StringFilter | string
    last_modified?: DateTimeFilter | Date | string
    placement?: PlacementListRelationFilter
    user_account?: User_accountListRelationFilter
  }

  export type studentOrderByWithRelationInput = {
    student_uid?: SortOrder
    english_name?: SortOrder
    acad_year?: SortOrder
    course_year?: SortOrder
    curriculum?: SortOrder
    placement_status?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
    placement?: placementOrderByRelationAggregateInput
    user_account?: user_accountOrderByRelationAggregateInput
  }

  export type studentWhereUniqueInput = {
    student_uid?: string
  }

  export type studentOrderByWithAggregationInput = {
    student_uid?: SortOrder
    english_name?: SortOrder
    acad_year?: SortOrder
    course_year?: SortOrder
    curriculum?: SortOrder
    placement_status?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
    _count?: studentCountOrderByAggregateInput
    _avg?: studentAvgOrderByAggregateInput
    _max?: studentMaxOrderByAggregateInput
    _min?: studentMinOrderByAggregateInput
    _sum?: studentSumOrderByAggregateInput
  }

  export type studentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<studentScalarWhereWithAggregatesInput>
    OR?: Enumerable<studentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<studentScalarWhereWithAggregatesInput>
    student_uid?: StringWithAggregatesFilter | string
    english_name?: StringWithAggregatesFilter | string
    acad_year?: StringWithAggregatesFilter | string
    course_year?: IntWithAggregatesFilter | number
    curriculum?: StringWithAggregatesFilter | string
    placement_status?: Enumstudent_placement_statusWithAggregatesFilter | student_placement_status
    modified_by?: StringWithAggregatesFilter | string
    last_modified?: DateTimeWithAggregatesFilter | Date | string
  }

  export type user_accountWhereInput = {
    AND?: Enumerable<user_accountWhereInput>
    OR?: Enumerable<user_accountWhereInput>
    NOT?: Enumerable<user_accountWhereInput>
    account_id?: IntFilter | number
    student_uid?: StringNullableFilter | string | null
    username?: StringFilter | string
    password?: StringFilter | string
    student?: XOR<StudentRelationFilter, studentWhereInput> | null
    faq?: FaqListRelationFilter
    placement?: PlacementListRelationFilter
    remarks?: RemarksListRelationFilter
  }

  export type user_accountOrderByWithRelationInput = {
    account_id?: SortOrder
    student_uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    student?: studentOrderByWithRelationInput
    faq?: faqOrderByRelationAggregateInput
    placement?: placementOrderByRelationAggregateInput
    remarks?: remarksOrderByRelationAggregateInput
  }

  export type user_accountWhereUniqueInput = {
    account_id?: number
    username?: string
  }

  export type user_accountOrderByWithAggregationInput = {
    account_id?: SortOrder
    student_uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: user_accountCountOrderByAggregateInput
    _avg?: user_accountAvgOrderByAggregateInput
    _max?: user_accountMaxOrderByAggregateInput
    _min?: user_accountMinOrderByAggregateInput
    _sum?: user_accountSumOrderByAggregateInput
  }

  export type user_accountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_accountScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_accountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_accountScalarWhereWithAggregatesInput>
    account_id?: IntWithAggregatesFilter | number
    student_uid?: StringNullableWithAggregatesFilter | string | null
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type placementWhereInput = {
    AND?: Enumerable<placementWhereInput>
    OR?: Enumerable<placementWhereInput>
    NOT?: Enumerable<placementWhereInput>
    placement_id?: IntFilter | number
    username?: StringFilter | string
    student_uid?: StringFilter | string
    placement_year?: StringFilter | string
    appointment_letter?: StringNullableFilter | string | null
    feedback_form?: StringNullableFilter | string | null
    feedback_comment?: StringNullableFilter | string | null
    company_name?: StringNullableFilter | string | null
    job_title?: StringNullableFilter | string | null
    job_nature?: StringNullableFilter | string | null
    employment_duration?: StringNullableFilter | string | null
    start_date?: DateTimeNullableFilter | Date | string | null
    end_date?: DateTimeNullableFilter | Date | string | null
    working_location?: StringNullableFilter | string | null
    salary?: DecimalNullableFilter | Decimal | number | string | null
    payment_type?: Enumplacement_payment_typeNullableFilter | placement_payment_type | null
    supervisor_name?: StringNullableFilter | string | null
    supervisor_telephone?: StringNullableFilter | string | null
    supervisor_email?: StringNullableFilter | string | null
    modified_by?: StringFilter | string
    last_modified?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    creation_time?: DateTimeFilter | Date | string
    consent_form?: StringNullableFilter | string | null
    student?: XOR<StudentRelationFilter, studentWhereInput>
    user_account?: XOR<User_accountRelationFilter, user_accountWhereInput>
    remarks?: RemarksListRelationFilter
  }

  export type placementOrderByWithRelationInput = {
    placement_id?: SortOrder
    username?: SortOrder
    student_uid?: SortOrder
    placement_year?: SortOrder
    appointment_letter?: SortOrder
    feedback_form?: SortOrder
    feedback_comment?: SortOrder
    company_name?: SortOrder
    job_title?: SortOrder
    job_nature?: SortOrder
    employment_duration?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    working_location?: SortOrder
    salary?: SortOrder
    payment_type?: SortOrder
    supervisor_name?: SortOrder
    supervisor_telephone?: SortOrder
    supervisor_email?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
    created_by?: SortOrder
    creation_time?: SortOrder
    consent_form?: SortOrder
    student?: studentOrderByWithRelationInput
    user_account?: user_accountOrderByWithRelationInput
    remarks?: remarksOrderByRelationAggregateInput
  }

  export type placementWhereUniqueInput = {
    placement_id?: number
  }

  export type placementOrderByWithAggregationInput = {
    placement_id?: SortOrder
    username?: SortOrder
    student_uid?: SortOrder
    placement_year?: SortOrder
    appointment_letter?: SortOrder
    feedback_form?: SortOrder
    feedback_comment?: SortOrder
    company_name?: SortOrder
    job_title?: SortOrder
    job_nature?: SortOrder
    employment_duration?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    working_location?: SortOrder
    salary?: SortOrder
    payment_type?: SortOrder
    supervisor_name?: SortOrder
    supervisor_telephone?: SortOrder
    supervisor_email?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
    created_by?: SortOrder
    creation_time?: SortOrder
    consent_form?: SortOrder
    _count?: placementCountOrderByAggregateInput
    _avg?: placementAvgOrderByAggregateInput
    _max?: placementMaxOrderByAggregateInput
    _min?: placementMinOrderByAggregateInput
    _sum?: placementSumOrderByAggregateInput
  }

  export type placementScalarWhereWithAggregatesInput = {
    AND?: Enumerable<placementScalarWhereWithAggregatesInput>
    OR?: Enumerable<placementScalarWhereWithAggregatesInput>
    NOT?: Enumerable<placementScalarWhereWithAggregatesInput>
    placement_id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    student_uid?: StringWithAggregatesFilter | string
    placement_year?: StringWithAggregatesFilter | string
    appointment_letter?: StringNullableWithAggregatesFilter | string | null
    feedback_form?: StringNullableWithAggregatesFilter | string | null
    feedback_comment?: StringNullableWithAggregatesFilter | string | null
    company_name?: StringNullableWithAggregatesFilter | string | null
    job_title?: StringNullableWithAggregatesFilter | string | null
    job_nature?: StringNullableWithAggregatesFilter | string | null
    employment_duration?: StringNullableWithAggregatesFilter | string | null
    start_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    working_location?: StringNullableWithAggregatesFilter | string | null
    salary?: DecimalNullableWithAggregatesFilter | Decimal | number | string | null
    payment_type?: Enumplacement_payment_typeNullableWithAggregatesFilter | placement_payment_type | null
    supervisor_name?: StringNullableWithAggregatesFilter | string | null
    supervisor_telephone?: StringNullableWithAggregatesFilter | string | null
    supervisor_email?: StringNullableWithAggregatesFilter | string | null
    modified_by?: StringWithAggregatesFilter | string
    last_modified?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    creation_time?: DateTimeWithAggregatesFilter | Date | string
    consent_form?: StringNullableWithAggregatesFilter | string | null
  }

  export type faqWhereInput = {
    AND?: Enumerable<faqWhereInput>
    OR?: Enumerable<faqWhereInput>
    NOT?: Enumerable<faqWhereInput>
    faq_id?: IntFilter | number
    account_id?: IntFilter | number
    questions?: StringNullableFilter | string | null
    answers?: StringNullableFilter | string | null
    last_modified?: DateTimeFilter | Date | string
    cat?: StringNullableFilter | string | null
    user_account?: XOR<User_accountRelationFilter, user_accountWhereInput>
  }

  export type faqOrderByWithRelationInput = {
    faq_id?: SortOrder
    account_id?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    last_modified?: SortOrder
    cat?: SortOrder
    user_account?: user_accountOrderByWithRelationInput
  }

  export type faqWhereUniqueInput = {
    faq_id?: number
  }

  export type faqOrderByWithAggregationInput = {
    faq_id?: SortOrder
    account_id?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    last_modified?: SortOrder
    cat?: SortOrder
    _count?: faqCountOrderByAggregateInput
    _avg?: faqAvgOrderByAggregateInput
    _max?: faqMaxOrderByAggregateInput
    _min?: faqMinOrderByAggregateInput
    _sum?: faqSumOrderByAggregateInput
  }

  export type faqScalarWhereWithAggregatesInput = {
    AND?: Enumerable<faqScalarWhereWithAggregatesInput>
    OR?: Enumerable<faqScalarWhereWithAggregatesInput>
    NOT?: Enumerable<faqScalarWhereWithAggregatesInput>
    faq_id?: IntWithAggregatesFilter | number
    account_id?: IntWithAggregatesFilter | number
    questions?: StringNullableWithAggregatesFilter | string | null
    answers?: StringNullableWithAggregatesFilter | string | null
    last_modified?: DateTimeWithAggregatesFilter | Date | string
    cat?: StringNullableWithAggregatesFilter | string | null
  }

  export type remarksWhereInput = {
    AND?: Enumerable<remarksWhereInput>
    OR?: Enumerable<remarksWhereInput>
    NOT?: Enumerable<remarksWhereInput>
    remarks_id?: IntFilter | number
    account_id?: IntFilter | number
    placement_id?: IntFilter | number
    remark?: StringNullableFilter | string | null
    answers?: StringNullableFilter | string | null
    cat?: StringNullableFilter | string | null
    sent_on?: DateTimeFilter | Date | string
    sent_to?: StringFilter | string
    user_account?: XOR<User_accountRelationFilter, user_accountWhereInput>
    placement?: XOR<PlacementRelationFilter, placementWhereInput>
  }

  export type remarksOrderByWithRelationInput = {
    remarks_id?: SortOrder
    account_id?: SortOrder
    placement_id?: SortOrder
    remark?: SortOrder
    answers?: SortOrder
    cat?: SortOrder
    sent_on?: SortOrder
    sent_to?: SortOrder
    user_account?: user_accountOrderByWithRelationInput
    placement?: placementOrderByWithRelationInput
  }

  export type remarksWhereUniqueInput = {
    remarks_id?: number
  }

  export type remarksOrderByWithAggregationInput = {
    remarks_id?: SortOrder
    account_id?: SortOrder
    placement_id?: SortOrder
    remark?: SortOrder
    answers?: SortOrder
    cat?: SortOrder
    sent_on?: SortOrder
    sent_to?: SortOrder
    _count?: remarksCountOrderByAggregateInput
    _avg?: remarksAvgOrderByAggregateInput
    _max?: remarksMaxOrderByAggregateInput
    _min?: remarksMinOrderByAggregateInput
    _sum?: remarksSumOrderByAggregateInput
  }

  export type remarksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<remarksScalarWhereWithAggregatesInput>
    OR?: Enumerable<remarksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<remarksScalarWhereWithAggregatesInput>
    remarks_id?: IntWithAggregatesFilter | number
    account_id?: IntWithAggregatesFilter | number
    placement_id?: IntWithAggregatesFilter | number
    remark?: StringNullableWithAggregatesFilter | string | null
    answers?: StringNullableWithAggregatesFilter | string | null
    cat?: StringNullableWithAggregatesFilter | string | null
    sent_on?: DateTimeWithAggregatesFilter | Date | string
    sent_to?: StringWithAggregatesFilter | string
  }

  export type test_acad_yearWhereInput = {
    AND?: Enumerable<test_acad_yearWhereInput>
    OR?: Enumerable<test_acad_yearWhereInput>
    NOT?: Enumerable<test_acad_yearWhereInput>
    acad_test_id?: IntFilter | number
    acad_test_year?: IntNullableFilter | number | null
  }

  export type test_acad_yearOrderByWithRelationInput = {
    acad_test_id?: SortOrder
    acad_test_year?: SortOrder
  }

  export type test_acad_yearWhereUniqueInput = {
    acad_test_id?: number
  }

  export type test_acad_yearOrderByWithAggregationInput = {
    acad_test_id?: SortOrder
    acad_test_year?: SortOrder
    _count?: test_acad_yearCountOrderByAggregateInput
    _avg?: test_acad_yearAvgOrderByAggregateInput
    _max?: test_acad_yearMaxOrderByAggregateInput
    _min?: test_acad_yearMinOrderByAggregateInput
    _sum?: test_acad_yearSumOrderByAggregateInput
  }

  export type test_acad_yearScalarWhereWithAggregatesInput = {
    AND?: Enumerable<test_acad_yearScalarWhereWithAggregatesInput>
    OR?: Enumerable<test_acad_yearScalarWhereWithAggregatesInput>
    NOT?: Enumerable<test_acad_yearScalarWhereWithAggregatesInput>
    acad_test_id?: IntWithAggregatesFilter | number
    acad_test_year?: IntNullableWithAggregatesFilter | number | null
  }

  export type test_placement_yearWhereInput = {
    AND?: Enumerable<test_placement_yearWhereInput>
    OR?: Enumerable<test_placement_yearWhereInput>
    NOT?: Enumerable<test_placement_yearWhereInput>
    placement_test_id?: IntFilter | number
    placement_test_year?: IntNullableFilter | number | null
  }

  export type test_placement_yearOrderByWithRelationInput = {
    placement_test_id?: SortOrder
    placement_test_year?: SortOrder
  }

  export type test_placement_yearWhereUniqueInput = {
    placement_test_id?: number
  }

  export type test_placement_yearOrderByWithAggregationInput = {
    placement_test_id?: SortOrder
    placement_test_year?: SortOrder
    _count?: test_placement_yearCountOrderByAggregateInput
    _avg?: test_placement_yearAvgOrderByAggregateInput
    _max?: test_placement_yearMaxOrderByAggregateInput
    _min?: test_placement_yearMinOrderByAggregateInput
    _sum?: test_placement_yearSumOrderByAggregateInput
  }

  export type test_placement_yearScalarWhereWithAggregatesInput = {
    AND?: Enumerable<test_placement_yearScalarWhereWithAggregatesInput>
    OR?: Enumerable<test_placement_yearScalarWhereWithAggregatesInput>
    NOT?: Enumerable<test_placement_yearScalarWhereWithAggregatesInput>
    placement_test_id?: IntWithAggregatesFilter | number
    placement_test_year?: IntNullableWithAggregatesFilter | number | null
  }

  export type studentCreateInput = {
    student_uid: string
    english_name: string
    acad_year: string
    course_year: number
    curriculum: string
    placement_status: student_placement_status
    modified_by: string
    last_modified?: Date | string
    placement?: placementCreateNestedManyWithoutStudentInput
    user_account?: user_accountCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateInput = {
    student_uid: string
    english_name: string
    acad_year: string
    course_year: number
    curriculum: string
    placement_status: student_placement_status
    modified_by: string
    last_modified?: Date | string
    placement?: placementUncheckedCreateNestedManyWithoutStudentInput
    user_account?: user_accountUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentUpdateInput = {
    student_uid?: StringFieldUpdateOperationsInput | string
    english_name?: StringFieldUpdateOperationsInput | string
    acad_year?: StringFieldUpdateOperationsInput | string
    course_year?: IntFieldUpdateOperationsInput | number
    curriculum?: StringFieldUpdateOperationsInput | string
    placement_status?: Enumstudent_placement_statusFieldUpdateOperationsInput | student_placement_status
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    placement?: placementUpdateManyWithoutStudentInput
    user_account?: user_accountUpdateManyWithoutStudentInput
  }

  export type studentUncheckedUpdateInput = {
    student_uid?: StringFieldUpdateOperationsInput | string
    english_name?: StringFieldUpdateOperationsInput | string
    acad_year?: StringFieldUpdateOperationsInput | string
    course_year?: IntFieldUpdateOperationsInput | number
    curriculum?: StringFieldUpdateOperationsInput | string
    placement_status?: Enumstudent_placement_statusFieldUpdateOperationsInput | student_placement_status
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    placement?: placementUncheckedUpdateManyWithoutStudentInput
    user_account?: user_accountUncheckedUpdateManyWithoutStudentInput
  }

  export type studentCreateManyInput = {
    student_uid: string
    english_name: string
    acad_year: string
    course_year: number
    curriculum: string
    placement_status: student_placement_status
    modified_by: string
    last_modified?: Date | string
  }

  export type studentUpdateManyMutationInput = {
    student_uid?: StringFieldUpdateOperationsInput | string
    english_name?: StringFieldUpdateOperationsInput | string
    acad_year?: StringFieldUpdateOperationsInput | string
    course_year?: IntFieldUpdateOperationsInput | number
    curriculum?: StringFieldUpdateOperationsInput | string
    placement_status?: Enumstudent_placement_statusFieldUpdateOperationsInput | student_placement_status
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentUncheckedUpdateManyInput = {
    student_uid?: StringFieldUpdateOperationsInput | string
    english_name?: StringFieldUpdateOperationsInput | string
    acad_year?: StringFieldUpdateOperationsInput | string
    course_year?: IntFieldUpdateOperationsInput | number
    curriculum?: StringFieldUpdateOperationsInput | string
    placement_status?: Enumstudent_placement_statusFieldUpdateOperationsInput | student_placement_status
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_accountCreateInput = {
    username: string
    password: string
    student?: studentCreateNestedOneWithoutUser_accountInput
    faq?: faqCreateNestedManyWithoutUser_accountInput
    placement?: placementCreateNestedManyWithoutUser_accountInput
    remarks?: remarksCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountUncheckedCreateInput = {
    account_id?: number
    student_uid?: string | null
    username: string
    password: string
    faq?: faqUncheckedCreateNestedManyWithoutUser_accountInput
    placement?: placementUncheckedCreateNestedManyWithoutUser_accountInput
    remarks?: remarksUncheckedCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    student?: studentUpdateOneWithoutUser_accountInput
    faq?: faqUpdateManyWithoutUser_accountInput
    placement?: placementUpdateManyWithoutUser_accountInput
    remarks?: remarksUpdateManyWithoutUser_accountInput
  }

  export type user_accountUncheckedUpdateInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    student_uid?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    faq?: faqUncheckedUpdateManyWithoutUser_accountInput
    placement?: placementUncheckedUpdateManyWithoutUser_accountInput
    remarks?: remarksUncheckedUpdateManyWithoutUser_accountInput
  }

  export type user_accountCreateManyInput = {
    account_id?: number
    student_uid?: string | null
    username: string
    password: string
  }

  export type user_accountUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type user_accountUncheckedUpdateManyInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    student_uid?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type placementCreateInput = {
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
    student: studentCreateNestedOneWithoutPlacementInput
    user_account: user_accountCreateNestedOneWithoutPlacementInput
    remarks?: remarksCreateNestedManyWithoutPlacementInput
  }

  export type placementUncheckedCreateInput = {
    placement_id?: number
    username: string
    student_uid: string
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
    remarks?: remarksUncheckedCreateNestedManyWithoutPlacementInput
  }

  export type placementUpdateInput = {
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
    student?: studentUpdateOneRequiredWithoutPlacementInput
    user_account?: user_accountUpdateOneRequiredWithoutPlacementInput
    remarks?: remarksUpdateManyWithoutPlacementInput
  }

  export type placementUncheckedUpdateInput = {
    placement_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    student_uid?: StringFieldUpdateOperationsInput | string
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: remarksUncheckedUpdateManyWithoutPlacementInput
  }

  export type placementCreateManyInput = {
    placement_id?: number
    username: string
    student_uid: string
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
  }

  export type placementUpdateManyMutationInput = {
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type placementUncheckedUpdateManyInput = {
    placement_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    student_uid?: StringFieldUpdateOperationsInput | string
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type faqCreateInput = {
    questions?: string | null
    answers?: string | null
    last_modified?: Date | string
    cat?: string | null
    user_account: user_accountCreateNestedOneWithoutFaqInput
  }

  export type faqUncheckedCreateInput = {
    faq_id?: number
    account_id: number
    questions?: string | null
    answers?: string | null
    last_modified?: Date | string
    cat?: string | null
  }

  export type faqUpdateInput = {
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    user_account?: user_accountUpdateOneRequiredWithoutFaqInput
  }

  export type faqUncheckedUpdateInput = {
    faq_id?: IntFieldUpdateOperationsInput | number
    account_id?: IntFieldUpdateOperationsInput | number
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    cat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type faqCreateManyInput = {
    faq_id?: number
    account_id: number
    questions?: string | null
    answers?: string | null
    last_modified?: Date | string
    cat?: string | null
  }

  export type faqUpdateManyMutationInput = {
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    cat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type faqUncheckedUpdateManyInput = {
    faq_id?: IntFieldUpdateOperationsInput | number
    account_id?: IntFieldUpdateOperationsInput | number
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    cat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type remarksCreateInput = {
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
    user_account: user_accountCreateNestedOneWithoutRemarksInput
    placement: placementCreateNestedOneWithoutRemarksInput
  }

  export type remarksUncheckedCreateInput = {
    remarks_id?: number
    account_id: number
    placement_id: number
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
  }

  export type remarksUpdateInput = {
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
    user_account?: user_accountUpdateOneRequiredWithoutRemarksInput
    placement?: placementUpdateOneRequiredWithoutRemarksInput
  }

  export type remarksUncheckedUpdateInput = {
    remarks_id?: IntFieldUpdateOperationsInput | number
    account_id?: IntFieldUpdateOperationsInput | number
    placement_id?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
  }

  export type remarksCreateManyInput = {
    remarks_id?: number
    account_id: number
    placement_id: number
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
  }

  export type remarksUpdateManyMutationInput = {
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
  }

  export type remarksUncheckedUpdateManyInput = {
    remarks_id?: IntFieldUpdateOperationsInput | number
    account_id?: IntFieldUpdateOperationsInput | number
    placement_id?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
  }

  export type test_acad_yearCreateInput = {
    acad_test_year?: number | null
  }

  export type test_acad_yearUncheckedCreateInput = {
    acad_test_id?: number
    acad_test_year?: number | null
  }

  export type test_acad_yearUpdateInput = {
    acad_test_year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type test_acad_yearUncheckedUpdateInput = {
    acad_test_id?: IntFieldUpdateOperationsInput | number
    acad_test_year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type test_acad_yearCreateManyInput = {
    acad_test_id?: number
    acad_test_year?: number | null
  }

  export type test_acad_yearUpdateManyMutationInput = {
    acad_test_year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type test_acad_yearUncheckedUpdateManyInput = {
    acad_test_id?: IntFieldUpdateOperationsInput | number
    acad_test_year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type test_placement_yearCreateInput = {
    placement_test_year?: number | null
  }

  export type test_placement_yearUncheckedCreateInput = {
    placement_test_id?: number
    placement_test_year?: number | null
  }

  export type test_placement_yearUpdateInput = {
    placement_test_year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type test_placement_yearUncheckedUpdateInput = {
    placement_test_id?: IntFieldUpdateOperationsInput | number
    placement_test_year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type test_placement_yearCreateManyInput = {
    placement_test_id?: number
    placement_test_year?: number | null
  }

  export type test_placement_yearUpdateManyMutationInput = {
    placement_test_year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type test_placement_yearUncheckedUpdateManyInput = {
    placement_test_id?: IntFieldUpdateOperationsInput | number
    placement_test_year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type Enumstudent_placement_statusFilter = {
    equals?: student_placement_status
    in?: Enumerable<student_placement_status>
    notIn?: Enumerable<student_placement_status>
    not?: NestedEnumstudent_placement_statusFilter | student_placement_status
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PlacementListRelationFilter = {
    every?: placementWhereInput
    some?: placementWhereInput
    none?: placementWhereInput
  }

  export type User_accountListRelationFilter = {
    every?: user_accountWhereInput
    some?: user_accountWhereInput
    none?: user_accountWhereInput
  }

  export type placementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_accountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studentCountOrderByAggregateInput = {
    student_uid?: SortOrder
    english_name?: SortOrder
    acad_year?: SortOrder
    course_year?: SortOrder
    curriculum?: SortOrder
    placement_status?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
  }

  export type studentAvgOrderByAggregateInput = {
    course_year?: SortOrder
  }

  export type studentMaxOrderByAggregateInput = {
    student_uid?: SortOrder
    english_name?: SortOrder
    acad_year?: SortOrder
    course_year?: SortOrder
    curriculum?: SortOrder
    placement_status?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
  }

  export type studentMinOrderByAggregateInput = {
    student_uid?: SortOrder
    english_name?: SortOrder
    acad_year?: SortOrder
    course_year?: SortOrder
    curriculum?: SortOrder
    placement_status?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
  }

  export type studentSumOrderByAggregateInput = {
    course_year?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type Enumstudent_placement_statusWithAggregatesFilter = {
    equals?: student_placement_status
    in?: Enumerable<student_placement_status>
    notIn?: Enumerable<student_placement_status>
    not?: NestedEnumstudent_placement_statusWithAggregatesFilter | student_placement_status
    _count?: NestedIntFilter
    _min?: NestedEnumstudent_placement_statusFilter
    _max?: NestedEnumstudent_placement_statusFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type StudentRelationFilter = {
    is?: studentWhereInput | null
    isNot?: studentWhereInput | null
  }

  export type FaqListRelationFilter = {
    every?: faqWhereInput
    some?: faqWhereInput
    none?: faqWhereInput
  }

  export type RemarksListRelationFilter = {
    every?: remarksWhereInput
    some?: remarksWhereInput
    none?: remarksWhereInput
  }

  export type faqOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type remarksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_accountCountOrderByAggregateInput = {
    account_id?: SortOrder
    student_uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type user_accountAvgOrderByAggregateInput = {
    account_id?: SortOrder
  }

  export type user_accountMaxOrderByAggregateInput = {
    account_id?: SortOrder
    student_uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type user_accountMinOrderByAggregateInput = {
    account_id?: SortOrder
    student_uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type user_accountSumOrderByAggregateInput = {
    account_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | number | string | null
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalNullableFilter | Decimal | number | string | null
  }

  export type Enumplacement_payment_typeNullableFilter = {
    equals?: placement_payment_type | null
    in?: Enumerable<placement_payment_type> | null
    notIn?: Enumerable<placement_payment_type> | null
    not?: NestedEnumplacement_payment_typeNullableFilter | placement_payment_type | null
  }

  export type User_accountRelationFilter = {
    is?: user_accountWhereInput
    isNot?: user_accountWhereInput
  }

  export type placementCountOrderByAggregateInput = {
    placement_id?: SortOrder
    username?: SortOrder
    student_uid?: SortOrder
    placement_year?: SortOrder
    appointment_letter?: SortOrder
    feedback_form?: SortOrder
    feedback_comment?: SortOrder
    company_name?: SortOrder
    job_title?: SortOrder
    job_nature?: SortOrder
    employment_duration?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    working_location?: SortOrder
    salary?: SortOrder
    payment_type?: SortOrder
    supervisor_name?: SortOrder
    supervisor_telephone?: SortOrder
    supervisor_email?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
    created_by?: SortOrder
    creation_time?: SortOrder
    consent_form?: SortOrder
  }

  export type placementAvgOrderByAggregateInput = {
    placement_id?: SortOrder
    salary?: SortOrder
  }

  export type placementMaxOrderByAggregateInput = {
    placement_id?: SortOrder
    username?: SortOrder
    student_uid?: SortOrder
    placement_year?: SortOrder
    appointment_letter?: SortOrder
    feedback_form?: SortOrder
    feedback_comment?: SortOrder
    company_name?: SortOrder
    job_title?: SortOrder
    job_nature?: SortOrder
    employment_duration?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    working_location?: SortOrder
    salary?: SortOrder
    payment_type?: SortOrder
    supervisor_name?: SortOrder
    supervisor_telephone?: SortOrder
    supervisor_email?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
    created_by?: SortOrder
    creation_time?: SortOrder
    consent_form?: SortOrder
  }

  export type placementMinOrderByAggregateInput = {
    placement_id?: SortOrder
    username?: SortOrder
    student_uid?: SortOrder
    placement_year?: SortOrder
    appointment_letter?: SortOrder
    feedback_form?: SortOrder
    feedback_comment?: SortOrder
    company_name?: SortOrder
    job_title?: SortOrder
    job_nature?: SortOrder
    employment_duration?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    working_location?: SortOrder
    salary?: SortOrder
    payment_type?: SortOrder
    supervisor_name?: SortOrder
    supervisor_telephone?: SortOrder
    supervisor_email?: SortOrder
    modified_by?: SortOrder
    last_modified?: SortOrder
    created_by?: SortOrder
    creation_time?: SortOrder
    consent_form?: SortOrder
  }

  export type placementSumOrderByAggregateInput = {
    placement_id?: SortOrder
    salary?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | number | string | null
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type Enumplacement_payment_typeNullableWithAggregatesFilter = {
    equals?: placement_payment_type | null
    in?: Enumerable<placement_payment_type> | null
    notIn?: Enumerable<placement_payment_type> | null
    not?: NestedEnumplacement_payment_typeNullableWithAggregatesFilter | placement_payment_type | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumplacement_payment_typeNullableFilter
    _max?: NestedEnumplacement_payment_typeNullableFilter
  }

  export type faqCountOrderByAggregateInput = {
    faq_id?: SortOrder
    account_id?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    last_modified?: SortOrder
    cat?: SortOrder
  }

  export type faqAvgOrderByAggregateInput = {
    faq_id?: SortOrder
    account_id?: SortOrder
  }

  export type faqMaxOrderByAggregateInput = {
    faq_id?: SortOrder
    account_id?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    last_modified?: SortOrder
    cat?: SortOrder
  }

  export type faqMinOrderByAggregateInput = {
    faq_id?: SortOrder
    account_id?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    last_modified?: SortOrder
    cat?: SortOrder
  }

  export type faqSumOrderByAggregateInput = {
    faq_id?: SortOrder
    account_id?: SortOrder
  }

  export type PlacementRelationFilter = {
    is?: placementWhereInput
    isNot?: placementWhereInput
  }

  export type remarksCountOrderByAggregateInput = {
    remarks_id?: SortOrder
    account_id?: SortOrder
    placement_id?: SortOrder
    remark?: SortOrder
    answers?: SortOrder
    cat?: SortOrder
    sent_on?: SortOrder
    sent_to?: SortOrder
  }

  export type remarksAvgOrderByAggregateInput = {
    remarks_id?: SortOrder
    account_id?: SortOrder
    placement_id?: SortOrder
  }

  export type remarksMaxOrderByAggregateInput = {
    remarks_id?: SortOrder
    account_id?: SortOrder
    placement_id?: SortOrder
    remark?: SortOrder
    answers?: SortOrder
    cat?: SortOrder
    sent_on?: SortOrder
    sent_to?: SortOrder
  }

  export type remarksMinOrderByAggregateInput = {
    remarks_id?: SortOrder
    account_id?: SortOrder
    placement_id?: SortOrder
    remark?: SortOrder
    answers?: SortOrder
    cat?: SortOrder
    sent_on?: SortOrder
    sent_to?: SortOrder
  }

  export type remarksSumOrderByAggregateInput = {
    remarks_id?: SortOrder
    account_id?: SortOrder
    placement_id?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type test_acad_yearCountOrderByAggregateInput = {
    acad_test_id?: SortOrder
    acad_test_year?: SortOrder
  }

  export type test_acad_yearAvgOrderByAggregateInput = {
    acad_test_id?: SortOrder
    acad_test_year?: SortOrder
  }

  export type test_acad_yearMaxOrderByAggregateInput = {
    acad_test_id?: SortOrder
    acad_test_year?: SortOrder
  }

  export type test_acad_yearMinOrderByAggregateInput = {
    acad_test_id?: SortOrder
    acad_test_year?: SortOrder
  }

  export type test_acad_yearSumOrderByAggregateInput = {
    acad_test_id?: SortOrder
    acad_test_year?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type test_placement_yearCountOrderByAggregateInput = {
    placement_test_id?: SortOrder
    placement_test_year?: SortOrder
  }

  export type test_placement_yearAvgOrderByAggregateInput = {
    placement_test_id?: SortOrder
    placement_test_year?: SortOrder
  }

  export type test_placement_yearMaxOrderByAggregateInput = {
    placement_test_id?: SortOrder
    placement_test_year?: SortOrder
  }

  export type test_placement_yearMinOrderByAggregateInput = {
    placement_test_id?: SortOrder
    placement_test_year?: SortOrder
  }

  export type test_placement_yearSumOrderByAggregateInput = {
    placement_test_id?: SortOrder
    placement_test_year?: SortOrder
  }

  export type placementCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<placementCreateWithoutStudentInput>, Enumerable<placementUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<placementCreateOrConnectWithoutStudentInput>
    createMany?: placementCreateManyStudentInputEnvelope
    connect?: Enumerable<placementWhereUniqueInput>
  }

  export type user_accountCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<user_accountCreateWithoutStudentInput>, Enumerable<user_accountUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<user_accountCreateOrConnectWithoutStudentInput>
    createMany?: user_accountCreateManyStudentInputEnvelope
    connect?: Enumerable<user_accountWhereUniqueInput>
  }

  export type placementUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<placementCreateWithoutStudentInput>, Enumerable<placementUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<placementCreateOrConnectWithoutStudentInput>
    createMany?: placementCreateManyStudentInputEnvelope
    connect?: Enumerable<placementWhereUniqueInput>
  }

  export type user_accountUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<user_accountCreateWithoutStudentInput>, Enumerable<user_accountUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<user_accountCreateOrConnectWithoutStudentInput>
    createMany?: user_accountCreateManyStudentInputEnvelope
    connect?: Enumerable<user_accountWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Enumstudent_placement_statusFieldUpdateOperationsInput = {
    set?: student_placement_status
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type placementUpdateManyWithoutStudentInput = {
    create?: XOR<Enumerable<placementCreateWithoutStudentInput>, Enumerable<placementUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<placementCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<placementUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: placementCreateManyStudentInputEnvelope
    set?: Enumerable<placementWhereUniqueInput>
    disconnect?: Enumerable<placementWhereUniqueInput>
    delete?: Enumerable<placementWhereUniqueInput>
    connect?: Enumerable<placementWhereUniqueInput>
    update?: Enumerable<placementUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<placementUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<placementScalarWhereInput>
  }

  export type user_accountUpdateManyWithoutStudentInput = {
    create?: XOR<Enumerable<user_accountCreateWithoutStudentInput>, Enumerable<user_accountUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<user_accountCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<user_accountUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: user_accountCreateManyStudentInputEnvelope
    set?: Enumerable<user_accountWhereUniqueInput>
    disconnect?: Enumerable<user_accountWhereUniqueInput>
    delete?: Enumerable<user_accountWhereUniqueInput>
    connect?: Enumerable<user_accountWhereUniqueInput>
    update?: Enumerable<user_accountUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<user_accountUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<user_accountScalarWhereInput>
  }

  export type placementUncheckedUpdateManyWithoutStudentInput = {
    create?: XOR<Enumerable<placementCreateWithoutStudentInput>, Enumerable<placementUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<placementCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<placementUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: placementCreateManyStudentInputEnvelope
    set?: Enumerable<placementWhereUniqueInput>
    disconnect?: Enumerable<placementWhereUniqueInput>
    delete?: Enumerable<placementWhereUniqueInput>
    connect?: Enumerable<placementWhereUniqueInput>
    update?: Enumerable<placementUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<placementUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<placementScalarWhereInput>
  }

  export type user_accountUncheckedUpdateManyWithoutStudentInput = {
    create?: XOR<Enumerable<user_accountCreateWithoutStudentInput>, Enumerable<user_accountUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<user_accountCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<user_accountUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: user_accountCreateManyStudentInputEnvelope
    set?: Enumerable<user_accountWhereUniqueInput>
    disconnect?: Enumerable<user_accountWhereUniqueInput>
    delete?: Enumerable<user_accountWhereUniqueInput>
    connect?: Enumerable<user_accountWhereUniqueInput>
    update?: Enumerable<user_accountUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<user_accountUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<user_accountScalarWhereInput>
  }

  export type studentCreateNestedOneWithoutUser_accountInput = {
    create?: XOR<studentCreateWithoutUser_accountInput, studentUncheckedCreateWithoutUser_accountInput>
    connectOrCreate?: studentCreateOrConnectWithoutUser_accountInput
    connect?: studentWhereUniqueInput
  }

  export type faqCreateNestedManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<faqCreateWithoutUser_accountInput>, Enumerable<faqUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<faqCreateOrConnectWithoutUser_accountInput>
    createMany?: faqCreateManyUser_accountInputEnvelope
    connect?: Enumerable<faqWhereUniqueInput>
  }

  export type placementCreateNestedManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<placementCreateWithoutUser_accountInput>, Enumerable<placementUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<placementCreateOrConnectWithoutUser_accountInput>
    createMany?: placementCreateManyUser_accountInputEnvelope
    connect?: Enumerable<placementWhereUniqueInput>
  }

  export type remarksCreateNestedManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<remarksCreateWithoutUser_accountInput>, Enumerable<remarksUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<remarksCreateOrConnectWithoutUser_accountInput>
    createMany?: remarksCreateManyUser_accountInputEnvelope
    connect?: Enumerable<remarksWhereUniqueInput>
  }

  export type faqUncheckedCreateNestedManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<faqCreateWithoutUser_accountInput>, Enumerable<faqUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<faqCreateOrConnectWithoutUser_accountInput>
    createMany?: faqCreateManyUser_accountInputEnvelope
    connect?: Enumerable<faqWhereUniqueInput>
  }

  export type placementUncheckedCreateNestedManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<placementCreateWithoutUser_accountInput>, Enumerable<placementUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<placementCreateOrConnectWithoutUser_accountInput>
    createMany?: placementCreateManyUser_accountInputEnvelope
    connect?: Enumerable<placementWhereUniqueInput>
  }

  export type remarksUncheckedCreateNestedManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<remarksCreateWithoutUser_accountInput>, Enumerable<remarksUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<remarksCreateOrConnectWithoutUser_accountInput>
    createMany?: remarksCreateManyUser_accountInputEnvelope
    connect?: Enumerable<remarksWhereUniqueInput>
  }

  export type studentUpdateOneWithoutUser_accountInput = {
    create?: XOR<studentCreateWithoutUser_accountInput, studentUncheckedCreateWithoutUser_accountInput>
    connectOrCreate?: studentCreateOrConnectWithoutUser_accountInput
    upsert?: studentUpsertWithoutUser_accountInput
    disconnect?: boolean
    delete?: boolean
    connect?: studentWhereUniqueInput
    update?: XOR<studentUpdateWithoutUser_accountInput, studentUncheckedUpdateWithoutUser_accountInput>
  }

  export type faqUpdateManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<faqCreateWithoutUser_accountInput>, Enumerable<faqUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<faqCreateOrConnectWithoutUser_accountInput>
    upsert?: Enumerable<faqUpsertWithWhereUniqueWithoutUser_accountInput>
    createMany?: faqCreateManyUser_accountInputEnvelope
    set?: Enumerable<faqWhereUniqueInput>
    disconnect?: Enumerable<faqWhereUniqueInput>
    delete?: Enumerable<faqWhereUniqueInput>
    connect?: Enumerable<faqWhereUniqueInput>
    update?: Enumerable<faqUpdateWithWhereUniqueWithoutUser_accountInput>
    updateMany?: Enumerable<faqUpdateManyWithWhereWithoutUser_accountInput>
    deleteMany?: Enumerable<faqScalarWhereInput>
  }

  export type placementUpdateManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<placementCreateWithoutUser_accountInput>, Enumerable<placementUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<placementCreateOrConnectWithoutUser_accountInput>
    upsert?: Enumerable<placementUpsertWithWhereUniqueWithoutUser_accountInput>
    createMany?: placementCreateManyUser_accountInputEnvelope
    set?: Enumerable<placementWhereUniqueInput>
    disconnect?: Enumerable<placementWhereUniqueInput>
    delete?: Enumerable<placementWhereUniqueInput>
    connect?: Enumerable<placementWhereUniqueInput>
    update?: Enumerable<placementUpdateWithWhereUniqueWithoutUser_accountInput>
    updateMany?: Enumerable<placementUpdateManyWithWhereWithoutUser_accountInput>
    deleteMany?: Enumerable<placementScalarWhereInput>
  }

  export type remarksUpdateManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<remarksCreateWithoutUser_accountInput>, Enumerable<remarksUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<remarksCreateOrConnectWithoutUser_accountInput>
    upsert?: Enumerable<remarksUpsertWithWhereUniqueWithoutUser_accountInput>
    createMany?: remarksCreateManyUser_accountInputEnvelope
    set?: Enumerable<remarksWhereUniqueInput>
    disconnect?: Enumerable<remarksWhereUniqueInput>
    delete?: Enumerable<remarksWhereUniqueInput>
    connect?: Enumerable<remarksWhereUniqueInput>
    update?: Enumerable<remarksUpdateWithWhereUniqueWithoutUser_accountInput>
    updateMany?: Enumerable<remarksUpdateManyWithWhereWithoutUser_accountInput>
    deleteMany?: Enumerable<remarksScalarWhereInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type faqUncheckedUpdateManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<faqCreateWithoutUser_accountInput>, Enumerable<faqUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<faqCreateOrConnectWithoutUser_accountInput>
    upsert?: Enumerable<faqUpsertWithWhereUniqueWithoutUser_accountInput>
    createMany?: faqCreateManyUser_accountInputEnvelope
    set?: Enumerable<faqWhereUniqueInput>
    disconnect?: Enumerable<faqWhereUniqueInput>
    delete?: Enumerable<faqWhereUniqueInput>
    connect?: Enumerable<faqWhereUniqueInput>
    update?: Enumerable<faqUpdateWithWhereUniqueWithoutUser_accountInput>
    updateMany?: Enumerable<faqUpdateManyWithWhereWithoutUser_accountInput>
    deleteMany?: Enumerable<faqScalarWhereInput>
  }

  export type placementUncheckedUpdateManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<placementCreateWithoutUser_accountInput>, Enumerable<placementUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<placementCreateOrConnectWithoutUser_accountInput>
    upsert?: Enumerable<placementUpsertWithWhereUniqueWithoutUser_accountInput>
    createMany?: placementCreateManyUser_accountInputEnvelope
    set?: Enumerable<placementWhereUniqueInput>
    disconnect?: Enumerable<placementWhereUniqueInput>
    delete?: Enumerable<placementWhereUniqueInput>
    connect?: Enumerable<placementWhereUniqueInput>
    update?: Enumerable<placementUpdateWithWhereUniqueWithoutUser_accountInput>
    updateMany?: Enumerable<placementUpdateManyWithWhereWithoutUser_accountInput>
    deleteMany?: Enumerable<placementScalarWhereInput>
  }

  export type remarksUncheckedUpdateManyWithoutUser_accountInput = {
    create?: XOR<Enumerable<remarksCreateWithoutUser_accountInput>, Enumerable<remarksUncheckedCreateWithoutUser_accountInput>>
    connectOrCreate?: Enumerable<remarksCreateOrConnectWithoutUser_accountInput>
    upsert?: Enumerable<remarksUpsertWithWhereUniqueWithoutUser_accountInput>
    createMany?: remarksCreateManyUser_accountInputEnvelope
    set?: Enumerable<remarksWhereUniqueInput>
    disconnect?: Enumerable<remarksWhereUniqueInput>
    delete?: Enumerable<remarksWhereUniqueInput>
    connect?: Enumerable<remarksWhereUniqueInput>
    update?: Enumerable<remarksUpdateWithWhereUniqueWithoutUser_accountInput>
    updateMany?: Enumerable<remarksUpdateManyWithWhereWithoutUser_accountInput>
    deleteMany?: Enumerable<remarksScalarWhereInput>
  }

  export type studentCreateNestedOneWithoutPlacementInput = {
    create?: XOR<studentCreateWithoutPlacementInput, studentUncheckedCreateWithoutPlacementInput>
    connectOrCreate?: studentCreateOrConnectWithoutPlacementInput
    connect?: studentWhereUniqueInput
  }

  export type user_accountCreateNestedOneWithoutPlacementInput = {
    create?: XOR<user_accountCreateWithoutPlacementInput, user_accountUncheckedCreateWithoutPlacementInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutPlacementInput
    connect?: user_accountWhereUniqueInput
  }

  export type remarksCreateNestedManyWithoutPlacementInput = {
    create?: XOR<Enumerable<remarksCreateWithoutPlacementInput>, Enumerable<remarksUncheckedCreateWithoutPlacementInput>>
    connectOrCreate?: Enumerable<remarksCreateOrConnectWithoutPlacementInput>
    createMany?: remarksCreateManyPlacementInputEnvelope
    connect?: Enumerable<remarksWhereUniqueInput>
  }

  export type remarksUncheckedCreateNestedManyWithoutPlacementInput = {
    create?: XOR<Enumerable<remarksCreateWithoutPlacementInput>, Enumerable<remarksUncheckedCreateWithoutPlacementInput>>
    connectOrCreate?: Enumerable<remarksCreateOrConnectWithoutPlacementInput>
    createMany?: remarksCreateManyPlacementInputEnvelope
    connect?: Enumerable<remarksWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | number | string | null
    increment?: Decimal | number | string
    decrement?: Decimal | number | string
    multiply?: Decimal | number | string
    divide?: Decimal | number | string
  }

  export type NullableEnumplacement_payment_typeFieldUpdateOperationsInput = {
    set?: placement_payment_type | null
  }

  export type studentUpdateOneRequiredWithoutPlacementInput = {
    create?: XOR<studentCreateWithoutPlacementInput, studentUncheckedCreateWithoutPlacementInput>
    connectOrCreate?: studentCreateOrConnectWithoutPlacementInput
    upsert?: studentUpsertWithoutPlacementInput
    connect?: studentWhereUniqueInput
    update?: XOR<studentUpdateWithoutPlacementInput, studentUncheckedUpdateWithoutPlacementInput>
  }

  export type user_accountUpdateOneRequiredWithoutPlacementInput = {
    create?: XOR<user_accountCreateWithoutPlacementInput, user_accountUncheckedCreateWithoutPlacementInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutPlacementInput
    upsert?: user_accountUpsertWithoutPlacementInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<user_accountUpdateWithoutPlacementInput, user_accountUncheckedUpdateWithoutPlacementInput>
  }

  export type remarksUpdateManyWithoutPlacementInput = {
    create?: XOR<Enumerable<remarksCreateWithoutPlacementInput>, Enumerable<remarksUncheckedCreateWithoutPlacementInput>>
    connectOrCreate?: Enumerable<remarksCreateOrConnectWithoutPlacementInput>
    upsert?: Enumerable<remarksUpsertWithWhereUniqueWithoutPlacementInput>
    createMany?: remarksCreateManyPlacementInputEnvelope
    set?: Enumerable<remarksWhereUniqueInput>
    disconnect?: Enumerable<remarksWhereUniqueInput>
    delete?: Enumerable<remarksWhereUniqueInput>
    connect?: Enumerable<remarksWhereUniqueInput>
    update?: Enumerable<remarksUpdateWithWhereUniqueWithoutPlacementInput>
    updateMany?: Enumerable<remarksUpdateManyWithWhereWithoutPlacementInput>
    deleteMany?: Enumerable<remarksScalarWhereInput>
  }

  export type remarksUncheckedUpdateManyWithoutPlacementInput = {
    create?: XOR<Enumerable<remarksCreateWithoutPlacementInput>, Enumerable<remarksUncheckedCreateWithoutPlacementInput>>
    connectOrCreate?: Enumerable<remarksCreateOrConnectWithoutPlacementInput>
    upsert?: Enumerable<remarksUpsertWithWhereUniqueWithoutPlacementInput>
    createMany?: remarksCreateManyPlacementInputEnvelope
    set?: Enumerable<remarksWhereUniqueInput>
    disconnect?: Enumerable<remarksWhereUniqueInput>
    delete?: Enumerable<remarksWhereUniqueInput>
    connect?: Enumerable<remarksWhereUniqueInput>
    update?: Enumerable<remarksUpdateWithWhereUniqueWithoutPlacementInput>
    updateMany?: Enumerable<remarksUpdateManyWithWhereWithoutPlacementInput>
    deleteMany?: Enumerable<remarksScalarWhereInput>
  }

  export type user_accountCreateNestedOneWithoutFaqInput = {
    create?: XOR<user_accountCreateWithoutFaqInput, user_accountUncheckedCreateWithoutFaqInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutFaqInput
    connect?: user_accountWhereUniqueInput
  }

  export type user_accountUpdateOneRequiredWithoutFaqInput = {
    create?: XOR<user_accountCreateWithoutFaqInput, user_accountUncheckedCreateWithoutFaqInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutFaqInput
    upsert?: user_accountUpsertWithoutFaqInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<user_accountUpdateWithoutFaqInput, user_accountUncheckedUpdateWithoutFaqInput>
  }

  export type user_accountCreateNestedOneWithoutRemarksInput = {
    create?: XOR<user_accountCreateWithoutRemarksInput, user_accountUncheckedCreateWithoutRemarksInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutRemarksInput
    connect?: user_accountWhereUniqueInput
  }

  export type placementCreateNestedOneWithoutRemarksInput = {
    create?: XOR<placementCreateWithoutRemarksInput, placementUncheckedCreateWithoutRemarksInput>
    connectOrCreate?: placementCreateOrConnectWithoutRemarksInput
    connect?: placementWhereUniqueInput
  }

  export type user_accountUpdateOneRequiredWithoutRemarksInput = {
    create?: XOR<user_accountCreateWithoutRemarksInput, user_accountUncheckedCreateWithoutRemarksInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutRemarksInput
    upsert?: user_accountUpsertWithoutRemarksInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<user_accountUpdateWithoutRemarksInput, user_accountUncheckedUpdateWithoutRemarksInput>
  }

  export type placementUpdateOneRequiredWithoutRemarksInput = {
    create?: XOR<placementCreateWithoutRemarksInput, placementUncheckedCreateWithoutRemarksInput>
    connectOrCreate?: placementCreateOrConnectWithoutRemarksInput
    upsert?: placementUpsertWithoutRemarksInput
    connect?: placementWhereUniqueInput
    update?: XOR<placementUpdateWithoutRemarksInput, placementUncheckedUpdateWithoutRemarksInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumstudent_placement_statusFilter = {
    equals?: student_placement_status
    in?: Enumerable<student_placement_status>
    notIn?: Enumerable<student_placement_status>
    not?: NestedEnumstudent_placement_statusFilter | student_placement_status
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumstudent_placement_statusWithAggregatesFilter = {
    equals?: student_placement_status
    in?: Enumerable<student_placement_status>
    notIn?: Enumerable<student_placement_status>
    not?: NestedEnumstudent_placement_statusWithAggregatesFilter | student_placement_status
    _count?: NestedIntFilter
    _min?: NestedEnumstudent_placement_statusFilter
    _max?: NestedEnumstudent_placement_statusFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | number | string | null
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalNullableFilter | Decimal | number | string | null
  }

  export type NestedEnumplacement_payment_typeNullableFilter = {
    equals?: placement_payment_type | null
    in?: Enumerable<placement_payment_type> | null
    notIn?: Enumerable<placement_payment_type> | null
    not?: NestedEnumplacement_payment_typeNullableFilter | placement_payment_type | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | number | string | null
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedEnumplacement_payment_typeNullableWithAggregatesFilter = {
    equals?: placement_payment_type | null
    in?: Enumerable<placement_payment_type> | null
    notIn?: Enumerable<placement_payment_type> | null
    not?: NestedEnumplacement_payment_typeNullableWithAggregatesFilter | placement_payment_type | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumplacement_payment_typeNullableFilter
    _max?: NestedEnumplacement_payment_typeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type placementCreateWithoutStudentInput = {
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
    user_account: user_accountCreateNestedOneWithoutPlacementInput
    remarks?: remarksCreateNestedManyWithoutPlacementInput
  }

  export type placementUncheckedCreateWithoutStudentInput = {
    placement_id?: number
    username: string
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
    remarks?: remarksUncheckedCreateNestedManyWithoutPlacementInput
  }

  export type placementCreateOrConnectWithoutStudentInput = {
    where: placementWhereUniqueInput
    create: XOR<placementCreateWithoutStudentInput, placementUncheckedCreateWithoutStudentInput>
  }

  export type placementCreateManyStudentInputEnvelope = {
    data: Enumerable<placementCreateManyStudentInput>
    skipDuplicates?: boolean
  }

  export type user_accountCreateWithoutStudentInput = {
    username: string
    password: string
    faq?: faqCreateNestedManyWithoutUser_accountInput
    placement?: placementCreateNestedManyWithoutUser_accountInput
    remarks?: remarksCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountUncheckedCreateWithoutStudentInput = {
    account_id?: number
    username: string
    password: string
    faq?: faqUncheckedCreateNestedManyWithoutUser_accountInput
    placement?: placementUncheckedCreateNestedManyWithoutUser_accountInput
    remarks?: remarksUncheckedCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountCreateOrConnectWithoutStudentInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutStudentInput, user_accountUncheckedCreateWithoutStudentInput>
  }

  export type user_accountCreateManyStudentInputEnvelope = {
    data: Enumerable<user_accountCreateManyStudentInput>
    skipDuplicates?: boolean
  }

  export type placementUpsertWithWhereUniqueWithoutStudentInput = {
    where: placementWhereUniqueInput
    update: XOR<placementUpdateWithoutStudentInput, placementUncheckedUpdateWithoutStudentInput>
    create: XOR<placementCreateWithoutStudentInput, placementUncheckedCreateWithoutStudentInput>
  }

  export type placementUpdateWithWhereUniqueWithoutStudentInput = {
    where: placementWhereUniqueInput
    data: XOR<placementUpdateWithoutStudentInput, placementUncheckedUpdateWithoutStudentInput>
  }

  export type placementUpdateManyWithWhereWithoutStudentInput = {
    where: placementScalarWhereInput
    data: XOR<placementUpdateManyMutationInput, placementUncheckedUpdateManyWithoutPlacementInput>
  }

  export type placementScalarWhereInput = {
    AND?: Enumerable<placementScalarWhereInput>
    OR?: Enumerable<placementScalarWhereInput>
    NOT?: Enumerable<placementScalarWhereInput>
    placement_id?: IntFilter | number
    username?: StringFilter | string
    student_uid?: StringFilter | string
    placement_year?: StringFilter | string
    appointment_letter?: StringNullableFilter | string | null
    feedback_form?: StringNullableFilter | string | null
    feedback_comment?: StringNullableFilter | string | null
    company_name?: StringNullableFilter | string | null
    job_title?: StringNullableFilter | string | null
    job_nature?: StringNullableFilter | string | null
    employment_duration?: StringNullableFilter | string | null
    start_date?: DateTimeNullableFilter | Date | string | null
    end_date?: DateTimeNullableFilter | Date | string | null
    working_location?: StringNullableFilter | string | null
    salary?: DecimalNullableFilter | Decimal | number | string | null
    payment_type?: Enumplacement_payment_typeNullableFilter | placement_payment_type | null
    supervisor_name?: StringNullableFilter | string | null
    supervisor_telephone?: StringNullableFilter | string | null
    supervisor_email?: StringNullableFilter | string | null
    modified_by?: StringFilter | string
    last_modified?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    creation_time?: DateTimeFilter | Date | string
    consent_form?: StringNullableFilter | string | null
  }

  export type user_accountUpsertWithWhereUniqueWithoutStudentInput = {
    where: user_accountWhereUniqueInput
    update: XOR<user_accountUpdateWithoutStudentInput, user_accountUncheckedUpdateWithoutStudentInput>
    create: XOR<user_accountCreateWithoutStudentInput, user_accountUncheckedCreateWithoutStudentInput>
  }

  export type user_accountUpdateWithWhereUniqueWithoutStudentInput = {
    where: user_accountWhereUniqueInput
    data: XOR<user_accountUpdateWithoutStudentInput, user_accountUncheckedUpdateWithoutStudentInput>
  }

  export type user_accountUpdateManyWithWhereWithoutStudentInput = {
    where: user_accountScalarWhereInput
    data: XOR<user_accountUpdateManyMutationInput, user_accountUncheckedUpdateManyWithoutUser_accountInput>
  }

  export type user_accountScalarWhereInput = {
    AND?: Enumerable<user_accountScalarWhereInput>
    OR?: Enumerable<user_accountScalarWhereInput>
    NOT?: Enumerable<user_accountScalarWhereInput>
    account_id?: IntFilter | number
    student_uid?: StringNullableFilter | string | null
    username?: StringFilter | string
    password?: StringFilter | string
  }

  export type studentCreateWithoutUser_accountInput = {
    student_uid: string
    english_name: string
    acad_year: string
    course_year: number
    curriculum: string
    placement_status: student_placement_status
    modified_by: string
    last_modified?: Date | string
    placement?: placementCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateWithoutUser_accountInput = {
    student_uid: string
    english_name: string
    acad_year: string
    course_year: number
    curriculum: string
    placement_status: student_placement_status
    modified_by: string
    last_modified?: Date | string
    placement?: placementUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentCreateOrConnectWithoutUser_accountInput = {
    where: studentWhereUniqueInput
    create: XOR<studentCreateWithoutUser_accountInput, studentUncheckedCreateWithoutUser_accountInput>
  }

  export type faqCreateWithoutUser_accountInput = {
    questions?: string | null
    answers?: string | null
    last_modified?: Date | string
    cat?: string | null
  }

  export type faqUncheckedCreateWithoutUser_accountInput = {
    faq_id?: number
    questions?: string | null
    answers?: string | null
    last_modified?: Date | string
    cat?: string | null
  }

  export type faqCreateOrConnectWithoutUser_accountInput = {
    where: faqWhereUniqueInput
    create: XOR<faqCreateWithoutUser_accountInput, faqUncheckedCreateWithoutUser_accountInput>
  }

  export type faqCreateManyUser_accountInputEnvelope = {
    data: Enumerable<faqCreateManyUser_accountInput>
    skipDuplicates?: boolean
  }

  export type placementCreateWithoutUser_accountInput = {
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
    student: studentCreateNestedOneWithoutPlacementInput
    remarks?: remarksCreateNestedManyWithoutPlacementInput
  }

  export type placementUncheckedCreateWithoutUser_accountInput = {
    placement_id?: number
    student_uid: string
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
    remarks?: remarksUncheckedCreateNestedManyWithoutPlacementInput
  }

  export type placementCreateOrConnectWithoutUser_accountInput = {
    where: placementWhereUniqueInput
    create: XOR<placementCreateWithoutUser_accountInput, placementUncheckedCreateWithoutUser_accountInput>
  }

  export type placementCreateManyUser_accountInputEnvelope = {
    data: Enumerable<placementCreateManyUser_accountInput>
    skipDuplicates?: boolean
  }

  export type remarksCreateWithoutUser_accountInput = {
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
    placement: placementCreateNestedOneWithoutRemarksInput
  }

  export type remarksUncheckedCreateWithoutUser_accountInput = {
    remarks_id?: number
    placement_id: number
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
  }

  export type remarksCreateOrConnectWithoutUser_accountInput = {
    where: remarksWhereUniqueInput
    create: XOR<remarksCreateWithoutUser_accountInput, remarksUncheckedCreateWithoutUser_accountInput>
  }

  export type remarksCreateManyUser_accountInputEnvelope = {
    data: Enumerable<remarksCreateManyUser_accountInput>
    skipDuplicates?: boolean
  }

  export type studentUpsertWithoutUser_accountInput = {
    update: XOR<studentUpdateWithoutUser_accountInput, studentUncheckedUpdateWithoutUser_accountInput>
    create: XOR<studentCreateWithoutUser_accountInput, studentUncheckedCreateWithoutUser_accountInput>
  }

  export type studentUpdateWithoutUser_accountInput = {
    student_uid?: StringFieldUpdateOperationsInput | string
    english_name?: StringFieldUpdateOperationsInput | string
    acad_year?: StringFieldUpdateOperationsInput | string
    course_year?: IntFieldUpdateOperationsInput | number
    curriculum?: StringFieldUpdateOperationsInput | string
    placement_status?: Enumstudent_placement_statusFieldUpdateOperationsInput | student_placement_status
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    placement?: placementUpdateManyWithoutStudentInput
  }

  export type studentUncheckedUpdateWithoutUser_accountInput = {
    student_uid?: StringFieldUpdateOperationsInput | string
    english_name?: StringFieldUpdateOperationsInput | string
    acad_year?: StringFieldUpdateOperationsInput | string
    course_year?: IntFieldUpdateOperationsInput | number
    curriculum?: StringFieldUpdateOperationsInput | string
    placement_status?: Enumstudent_placement_statusFieldUpdateOperationsInput | student_placement_status
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    placement?: placementUncheckedUpdateManyWithoutStudentInput
  }

  export type faqUpsertWithWhereUniqueWithoutUser_accountInput = {
    where: faqWhereUniqueInput
    update: XOR<faqUpdateWithoutUser_accountInput, faqUncheckedUpdateWithoutUser_accountInput>
    create: XOR<faqCreateWithoutUser_accountInput, faqUncheckedCreateWithoutUser_accountInput>
  }

  export type faqUpdateWithWhereUniqueWithoutUser_accountInput = {
    where: faqWhereUniqueInput
    data: XOR<faqUpdateWithoutUser_accountInput, faqUncheckedUpdateWithoutUser_accountInput>
  }

  export type faqUpdateManyWithWhereWithoutUser_accountInput = {
    where: faqScalarWhereInput
    data: XOR<faqUpdateManyMutationInput, faqUncheckedUpdateManyWithoutFaqInput>
  }

  export type faqScalarWhereInput = {
    AND?: Enumerable<faqScalarWhereInput>
    OR?: Enumerable<faqScalarWhereInput>
    NOT?: Enumerable<faqScalarWhereInput>
    faq_id?: IntFilter | number
    account_id?: IntFilter | number
    questions?: StringNullableFilter | string | null
    answers?: StringNullableFilter | string | null
    last_modified?: DateTimeFilter | Date | string
    cat?: StringNullableFilter | string | null
  }

  export type placementUpsertWithWhereUniqueWithoutUser_accountInput = {
    where: placementWhereUniqueInput
    update: XOR<placementUpdateWithoutUser_accountInput, placementUncheckedUpdateWithoutUser_accountInput>
    create: XOR<placementCreateWithoutUser_accountInput, placementUncheckedCreateWithoutUser_accountInput>
  }

  export type placementUpdateWithWhereUniqueWithoutUser_accountInput = {
    where: placementWhereUniqueInput
    data: XOR<placementUpdateWithoutUser_accountInput, placementUncheckedUpdateWithoutUser_accountInput>
  }

  export type placementUpdateManyWithWhereWithoutUser_accountInput = {
    where: placementScalarWhereInput
    data: XOR<placementUpdateManyMutationInput, placementUncheckedUpdateManyWithoutPlacementInput>
  }

  export type remarksUpsertWithWhereUniqueWithoutUser_accountInput = {
    where: remarksWhereUniqueInput
    update: XOR<remarksUpdateWithoutUser_accountInput, remarksUncheckedUpdateWithoutUser_accountInput>
    create: XOR<remarksCreateWithoutUser_accountInput, remarksUncheckedCreateWithoutUser_accountInput>
  }

  export type remarksUpdateWithWhereUniqueWithoutUser_accountInput = {
    where: remarksWhereUniqueInput
    data: XOR<remarksUpdateWithoutUser_accountInput, remarksUncheckedUpdateWithoutUser_accountInput>
  }

  export type remarksUpdateManyWithWhereWithoutUser_accountInput = {
    where: remarksScalarWhereInput
    data: XOR<remarksUpdateManyMutationInput, remarksUncheckedUpdateManyWithoutRemarksInput>
  }

  export type remarksScalarWhereInput = {
    AND?: Enumerable<remarksScalarWhereInput>
    OR?: Enumerable<remarksScalarWhereInput>
    NOT?: Enumerable<remarksScalarWhereInput>
    remarks_id?: IntFilter | number
    account_id?: IntFilter | number
    placement_id?: IntFilter | number
    remark?: StringNullableFilter | string | null
    answers?: StringNullableFilter | string | null
    cat?: StringNullableFilter | string | null
    sent_on?: DateTimeFilter | Date | string
    sent_to?: StringFilter | string
  }

  export type studentCreateWithoutPlacementInput = {
    student_uid: string
    english_name: string
    acad_year: string
    course_year: number
    curriculum: string
    placement_status: student_placement_status
    modified_by: string
    last_modified?: Date | string
    user_account?: user_accountCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateWithoutPlacementInput = {
    student_uid: string
    english_name: string
    acad_year: string
    course_year: number
    curriculum: string
    placement_status: student_placement_status
    modified_by: string
    last_modified?: Date | string
    user_account?: user_accountUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentCreateOrConnectWithoutPlacementInput = {
    where: studentWhereUniqueInput
    create: XOR<studentCreateWithoutPlacementInput, studentUncheckedCreateWithoutPlacementInput>
  }

  export type user_accountCreateWithoutPlacementInput = {
    username: string
    password: string
    student?: studentCreateNestedOneWithoutUser_accountInput
    faq?: faqCreateNestedManyWithoutUser_accountInput
    remarks?: remarksCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountUncheckedCreateWithoutPlacementInput = {
    account_id?: number
    student_uid?: string | null
    username: string
    password: string
    faq?: faqUncheckedCreateNestedManyWithoutUser_accountInput
    remarks?: remarksUncheckedCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountCreateOrConnectWithoutPlacementInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutPlacementInput, user_accountUncheckedCreateWithoutPlacementInput>
  }

  export type remarksCreateWithoutPlacementInput = {
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
    user_account: user_accountCreateNestedOneWithoutRemarksInput
  }

  export type remarksUncheckedCreateWithoutPlacementInput = {
    remarks_id?: number
    account_id: number
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
  }

  export type remarksCreateOrConnectWithoutPlacementInput = {
    where: remarksWhereUniqueInput
    create: XOR<remarksCreateWithoutPlacementInput, remarksUncheckedCreateWithoutPlacementInput>
  }

  export type remarksCreateManyPlacementInputEnvelope = {
    data: Enumerable<remarksCreateManyPlacementInput>
    skipDuplicates?: boolean
  }

  export type studentUpsertWithoutPlacementInput = {
    update: XOR<studentUpdateWithoutPlacementInput, studentUncheckedUpdateWithoutPlacementInput>
    create: XOR<studentCreateWithoutPlacementInput, studentUncheckedCreateWithoutPlacementInput>
  }

  export type studentUpdateWithoutPlacementInput = {
    student_uid?: StringFieldUpdateOperationsInput | string
    english_name?: StringFieldUpdateOperationsInput | string
    acad_year?: StringFieldUpdateOperationsInput | string
    course_year?: IntFieldUpdateOperationsInput | number
    curriculum?: StringFieldUpdateOperationsInput | string
    placement_status?: Enumstudent_placement_statusFieldUpdateOperationsInput | student_placement_status
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user_account?: user_accountUpdateManyWithoutStudentInput
  }

  export type studentUncheckedUpdateWithoutPlacementInput = {
    student_uid?: StringFieldUpdateOperationsInput | string
    english_name?: StringFieldUpdateOperationsInput | string
    acad_year?: StringFieldUpdateOperationsInput | string
    course_year?: IntFieldUpdateOperationsInput | number
    curriculum?: StringFieldUpdateOperationsInput | string
    placement_status?: Enumstudent_placement_statusFieldUpdateOperationsInput | student_placement_status
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user_account?: user_accountUncheckedUpdateManyWithoutStudentInput
  }

  export type user_accountUpsertWithoutPlacementInput = {
    update: XOR<user_accountUpdateWithoutPlacementInput, user_accountUncheckedUpdateWithoutPlacementInput>
    create: XOR<user_accountCreateWithoutPlacementInput, user_accountUncheckedCreateWithoutPlacementInput>
  }

  export type user_accountUpdateWithoutPlacementInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    student?: studentUpdateOneWithoutUser_accountInput
    faq?: faqUpdateManyWithoutUser_accountInput
    remarks?: remarksUpdateManyWithoutUser_accountInput
  }

  export type user_accountUncheckedUpdateWithoutPlacementInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    student_uid?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    faq?: faqUncheckedUpdateManyWithoutUser_accountInput
    remarks?: remarksUncheckedUpdateManyWithoutUser_accountInput
  }

  export type remarksUpsertWithWhereUniqueWithoutPlacementInput = {
    where: remarksWhereUniqueInput
    update: XOR<remarksUpdateWithoutPlacementInput, remarksUncheckedUpdateWithoutPlacementInput>
    create: XOR<remarksCreateWithoutPlacementInput, remarksUncheckedCreateWithoutPlacementInput>
  }

  export type remarksUpdateWithWhereUniqueWithoutPlacementInput = {
    where: remarksWhereUniqueInput
    data: XOR<remarksUpdateWithoutPlacementInput, remarksUncheckedUpdateWithoutPlacementInput>
  }

  export type remarksUpdateManyWithWhereWithoutPlacementInput = {
    where: remarksScalarWhereInput
    data: XOR<remarksUpdateManyMutationInput, remarksUncheckedUpdateManyWithoutRemarksInput>
  }

  export type user_accountCreateWithoutFaqInput = {
    username: string
    password: string
    student?: studentCreateNestedOneWithoutUser_accountInput
    placement?: placementCreateNestedManyWithoutUser_accountInput
    remarks?: remarksCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountUncheckedCreateWithoutFaqInput = {
    account_id?: number
    student_uid?: string | null
    username: string
    password: string
    placement?: placementUncheckedCreateNestedManyWithoutUser_accountInput
    remarks?: remarksUncheckedCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountCreateOrConnectWithoutFaqInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutFaqInput, user_accountUncheckedCreateWithoutFaqInput>
  }

  export type user_accountUpsertWithoutFaqInput = {
    update: XOR<user_accountUpdateWithoutFaqInput, user_accountUncheckedUpdateWithoutFaqInput>
    create: XOR<user_accountCreateWithoutFaqInput, user_accountUncheckedCreateWithoutFaqInput>
  }

  export type user_accountUpdateWithoutFaqInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    student?: studentUpdateOneWithoutUser_accountInput
    placement?: placementUpdateManyWithoutUser_accountInput
    remarks?: remarksUpdateManyWithoutUser_accountInput
  }

  export type user_accountUncheckedUpdateWithoutFaqInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    student_uid?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    placement?: placementUncheckedUpdateManyWithoutUser_accountInput
    remarks?: remarksUncheckedUpdateManyWithoutUser_accountInput
  }

  export type user_accountCreateWithoutRemarksInput = {
    username: string
    password: string
    student?: studentCreateNestedOneWithoutUser_accountInput
    faq?: faqCreateNestedManyWithoutUser_accountInput
    placement?: placementCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountUncheckedCreateWithoutRemarksInput = {
    account_id?: number
    student_uid?: string | null
    username: string
    password: string
    faq?: faqUncheckedCreateNestedManyWithoutUser_accountInput
    placement?: placementUncheckedCreateNestedManyWithoutUser_accountInput
  }

  export type user_accountCreateOrConnectWithoutRemarksInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutRemarksInput, user_accountUncheckedCreateWithoutRemarksInput>
  }

  export type placementCreateWithoutRemarksInput = {
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
    student: studentCreateNestedOneWithoutPlacementInput
    user_account: user_accountCreateNestedOneWithoutPlacementInput
  }

  export type placementUncheckedCreateWithoutRemarksInput = {
    placement_id?: number
    username: string
    student_uid: string
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
  }

  export type placementCreateOrConnectWithoutRemarksInput = {
    where: placementWhereUniqueInput
    create: XOR<placementCreateWithoutRemarksInput, placementUncheckedCreateWithoutRemarksInput>
  }

  export type user_accountUpsertWithoutRemarksInput = {
    update: XOR<user_accountUpdateWithoutRemarksInput, user_accountUncheckedUpdateWithoutRemarksInput>
    create: XOR<user_accountCreateWithoutRemarksInput, user_accountUncheckedCreateWithoutRemarksInput>
  }

  export type user_accountUpdateWithoutRemarksInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    student?: studentUpdateOneWithoutUser_accountInput
    faq?: faqUpdateManyWithoutUser_accountInput
    placement?: placementUpdateManyWithoutUser_accountInput
  }

  export type user_accountUncheckedUpdateWithoutRemarksInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    student_uid?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    faq?: faqUncheckedUpdateManyWithoutUser_accountInput
    placement?: placementUncheckedUpdateManyWithoutUser_accountInput
  }

  export type placementUpsertWithoutRemarksInput = {
    update: XOR<placementUpdateWithoutRemarksInput, placementUncheckedUpdateWithoutRemarksInput>
    create: XOR<placementCreateWithoutRemarksInput, placementUncheckedCreateWithoutRemarksInput>
  }

  export type placementUpdateWithoutRemarksInput = {
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
    student?: studentUpdateOneRequiredWithoutPlacementInput
    user_account?: user_accountUpdateOneRequiredWithoutPlacementInput
  }

  export type placementUncheckedUpdateWithoutRemarksInput = {
    placement_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    student_uid?: StringFieldUpdateOperationsInput | string
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type placementCreateManyStudentInput = {
    placement_id?: number
    username: string
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
  }

  export type user_accountCreateManyStudentInput = {
    account_id?: number
    username: string
    password: string
  }

  export type placementUpdateWithoutStudentInput = {
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
    user_account?: user_accountUpdateOneRequiredWithoutPlacementInput
    remarks?: remarksUpdateManyWithoutPlacementInput
  }

  export type placementUncheckedUpdateWithoutStudentInput = {
    placement_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: remarksUncheckedUpdateManyWithoutPlacementInput
  }

  export type placementUncheckedUpdateManyWithoutPlacementInput = {
    placement_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_accountUpdateWithoutStudentInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    faq?: faqUpdateManyWithoutUser_accountInput
    placement?: placementUpdateManyWithoutUser_accountInput
    remarks?: remarksUpdateManyWithoutUser_accountInput
  }

  export type user_accountUncheckedUpdateWithoutStudentInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    faq?: faqUncheckedUpdateManyWithoutUser_accountInput
    placement?: placementUncheckedUpdateManyWithoutUser_accountInput
    remarks?: remarksUncheckedUpdateManyWithoutUser_accountInput
  }

  export type user_accountUncheckedUpdateManyWithoutUser_accountInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type faqCreateManyUser_accountInput = {
    faq_id?: number
    questions?: string | null
    answers?: string | null
    last_modified?: Date | string
    cat?: string | null
  }

  export type placementCreateManyUser_accountInput = {
    placement_id?: number
    student_uid: string
    placement_year: string
    appointment_letter?: string | null
    feedback_form?: string | null
    feedback_comment?: string | null
    company_name?: string | null
    job_title?: string | null
    job_nature?: string | null
    employment_duration?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    working_location?: string | null
    salary?: Decimal | number | string | null
    payment_type?: placement_payment_type | null
    supervisor_name?: string | null
    supervisor_telephone?: string | null
    supervisor_email?: string | null
    modified_by: string
    last_modified?: Date | string
    created_by: string
    creation_time: Date | string
    consent_form?: string | null
  }

  export type remarksCreateManyUser_accountInput = {
    remarks_id?: number
    placement_id: number
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
  }

  export type faqUpdateWithoutUser_accountInput = {
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    cat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type faqUncheckedUpdateWithoutUser_accountInput = {
    faq_id?: IntFieldUpdateOperationsInput | number
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    cat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type faqUncheckedUpdateManyWithoutFaqInput = {
    faq_id?: IntFieldUpdateOperationsInput | number
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    cat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type placementUpdateWithoutUser_accountInput = {
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
    student?: studentUpdateOneRequiredWithoutPlacementInput
    remarks?: remarksUpdateManyWithoutPlacementInput
  }

  export type placementUncheckedUpdateWithoutUser_accountInput = {
    placement_id?: IntFieldUpdateOperationsInput | number
    student_uid?: StringFieldUpdateOperationsInput | string
    placement_year?: StringFieldUpdateOperationsInput | string
    appointment_letter?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_form?: NullableStringFieldUpdateOperationsInput | string | null
    feedback_comment?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_nature?: NullableStringFieldUpdateOperationsInput | string | null
    employment_duration?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    working_location?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    payment_type?: NullableEnumplacement_payment_typeFieldUpdateOperationsInput | placement_payment_type | null
    supervisor_name?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_telephone?: NullableStringFieldUpdateOperationsInput | string | null
    supervisor_email?: NullableStringFieldUpdateOperationsInput | string | null
    modified_by?: StringFieldUpdateOperationsInput | string
    last_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    creation_time?: DateTimeFieldUpdateOperationsInput | Date | string
    consent_form?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: remarksUncheckedUpdateManyWithoutPlacementInput
  }

  export type remarksUpdateWithoutUser_accountInput = {
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
    placement?: placementUpdateOneRequiredWithoutRemarksInput
  }

  export type remarksUncheckedUpdateWithoutUser_accountInput = {
    remarks_id?: IntFieldUpdateOperationsInput | number
    placement_id?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
  }

  export type remarksUncheckedUpdateManyWithoutRemarksInput = {
    remarks_id?: IntFieldUpdateOperationsInput | number
    placement_id?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
  }

  export type remarksCreateManyPlacementInput = {
    remarks_id?: number
    account_id: number
    remark?: string | null
    answers?: string | null
    cat?: string | null
    sent_on: Date | string
    sent_to: string
  }

  export type remarksUpdateWithoutPlacementInput = {
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
    user_account?: user_accountUpdateOneRequiredWithoutRemarksInput
  }

  export type remarksUncheckedUpdateWithoutPlacementInput = {
    remarks_id?: IntFieldUpdateOperationsInput | number
    account_id?: IntFieldUpdateOperationsInput | number
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    answers?: NullableStringFieldUpdateOperationsInput | string | null
    cat?: NullableStringFieldUpdateOperationsInput | string | null
    sent_on?: DateTimeFieldUpdateOperationsInput | Date | string
    sent_to?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}