
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.StudentScalarFieldEnum = makeEnum({
  student_uid: 'student_uid',
  english_name: 'english_name',
  acad_year: 'acad_year',
  course_year: 'course_year',
  curriculum: 'curriculum',
  placement_status: 'placement_status',
  modified_by: 'modified_by',
  last_modified: 'last_modified'
});

exports.Prisma.User_accountScalarFieldEnum = makeEnum({
  account_id: 'account_id',
  student_uid: 'student_uid',
  username: 'username',
  password: 'password'
});

exports.Prisma.PlacementScalarFieldEnum = makeEnum({
  placement_id: 'placement_id',
  username: 'username',
  student_uid: 'student_uid',
  placement_year: 'placement_year',
  appointment_letter: 'appointment_letter',
  feedback_form: 'feedback_form',
  feedback_comment: 'feedback_comment',
  company_name: 'company_name',
  job_title: 'job_title',
  job_nature: 'job_nature',
  employment_duration: 'employment_duration',
  start_date: 'start_date',
  end_date: 'end_date',
  working_location: 'working_location',
  salary: 'salary',
  payment_type: 'payment_type',
  supervisor_name: 'supervisor_name',
  supervisor_telephone: 'supervisor_telephone',
  supervisor_email: 'supervisor_email',
  modified_by: 'modified_by',
  last_modified: 'last_modified',
  created_by: 'created_by',
  creation_time: 'creation_time',
  consent_form: 'consent_form'
});

exports.Prisma.FaqScalarFieldEnum = makeEnum({
  faq_id: 'faq_id',
  account_id: 'account_id',
  questions: 'questions',
  answers: 'answers',
  last_modified: 'last_modified',
  cat: 'cat'
});

exports.Prisma.RemarksScalarFieldEnum = makeEnum({
  remarks_id: 'remarks_id',
  account_id: 'account_id',
  placement_id: 'placement_id',
  remark: 'remark',
  answers: 'answers',
  cat: 'cat',
  sent_on: 'sent_on',
  sent_to: 'sent_to'
});

exports.Prisma.Test_acad_yearScalarFieldEnum = makeEnum({
  acad_test_id: 'acad_test_id',
  acad_test_year: 'acad_test_year'
});

exports.Prisma.Test_placement_yearScalarFieldEnum = makeEnum({
  placement_test_id: 'placement_test_id',
  placement_test_year: 'placement_test_year'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.student_placement_status = makeEnum({
  NA: 'NA',
  Waiting: 'Waiting',
  Incomplete: 'Incomplete',
  Approved: 'Approved'
});

exports.placement_payment_type = makeEnum({
  paid: 'paid',
  unpaid: 'unpaid',
  honorarium: 'honorarium'
});

exports.Prisma.ModelName = makeEnum({
  student: 'student',
  user_account: 'user_account',
  placement: 'placement',
  faq: 'faq',
  remarks: 'remarks',
  test_acad_year: 'test_acad_year',
  test_placement_year: 'test_placement_year'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
